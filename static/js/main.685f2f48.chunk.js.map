{"version":3,"sources":["../../timer/model.ts","../../timer/slices/time-stamps.ts","components/bottom-menu.tsx","contexts/current-time-keeper.tsx","components/dial-pad.tsx","utils.ts","hooks.ts","components/players-dial-pad.tsx","components/player-with-timestamp-display.tsx","components/action-button.tsx","components/players-list.tsx","components/players-times.tsx","connection.ts","components/time-keeper-icon.tsx","components/timer.tsx","components/status.tsx","components/time-keeper-selector.tsx","App.tsx","reportWebVitals.ts","../../timer/slices/players.ts","../../timer/slices/race-categories.ts","../../timer/slices/time-keepers.ts","../../timer/store.ts","index.tsx"],"names":["getNextId","flow","Arr","pipe","N","Ord","e","id","Option","increment","removeById","items","timeStampsSlice","createSlice","name","initialState","reducers","add","state","action","timeStamps","timeStamp","payload","assignPlayer","modifiedTimeStamp","reset","actions","BottomMenuButton","text","path","icon","opacity","chosenPath","to","process","className","Icon","color","size","BottomMenu","mode","useLocation","pathname","split","slice","mdiCog","mdiFormatListNumberedRtl","mdiDialpad","mdiTimetable","CurrentTimeKeeperContext","createContext","timeKeeperId","undefined","setTimeKeeperId","padActions","addDigit","digit","player","concat","back","buttons","char","changeNumber","alwaysEnabled","PadButton","padClick","enabled","onClick","disabled","DialPad","props","map","b","availableDigits","includes","button","newNumber","number","onNumberChange","onPadButtonClick","formatNumber","n","precision","toLocaleString","minimumIntegerDigits","formatTime","time","getHours","getMinutes","getSeconds","getMilliseconds","getAvailableDigits","typedNumbers","allNumbers","String","S","length","s","useTimerDispatch","useDispatch","useTimerSelector","useSelector","TypedPlayer","playerNumber","CheckInPlayer","onPlayerCheckIn","lastName","PlayersDialPad","title","useState","setPlayerNumber","allPlayers","x","players","allTimeStamps","playersWithoutTimeStamps","find","a","playerId","filter","playersNumbersWithoutTimeStamps","availableNumbers","availablePlayers","p","PlayerWithTimeStampDisplay","playerWithTimeStamp","Date","PrimaryActionButton","ActionButton","contents","PlayersList","onTimeRecord","onTimeReset","onRecord","mdiAlarmOff","mdiAlarmCheck","mdiWrench","mdiAccountSupervisor","sort","times","PlayersTimes","onAddTime","timeStampToAssign","setTimeStampToAssign","Portal","usePortal","bindTo","document","getElementById","dispatch","mdiPlusCircleOutline","t","mdiAccountAlertOutline","mdiDeleteOutline","socket","require","io","transports","onStateChangedHandlers","runStateChangedHandlers","forEach","on","r","attempt","error","getIconFromType","type","mdiRayStartArrow","mdiRayVertex","mdiFlagCheckered","Error","TimeKeeperIcon","Time","Timer","setTime","useEffect","setInterval","getIconFromConnectionState","mdiCloudOutline","mdiCloudOffOutline","mdiWeatherCloudyAlert","mdiCloudSyncOutline","getTextFromConnectionState","Status","timeKeeperName","connectionState","setConnectionState","allTimeKeepers","timeKeepers","handler","unregister","push","splice","indexOf","Consumer","tk","TimeKeeperSelector","App","selectedTimeKeeper","setSelectedTimeKeeper","playersWithTimeStamps","timeStampsWithPlayers","Provider","value","exact","getTime","timeStampId","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","playersSlice","register","newPlayer","changeInfo","modifiedPlayer","raceCategoriesSlice","raceCategories","raceCategory","remove","timeKeepersSlice","newTimeKeeper","reducer","combineReducers","resettableRootReducer","configureStore","store","__remote","middlewares","postActionsMiddleware","storeApi","next","connected","emit","middleware","getDefaultMiddleware","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.685f2f48.chunk.js","sourcesContent":["import * as Arr from \"fp-ts/Array\";\nimport * as N from \"fp-ts/number\";\nimport * as Option from \"fp-ts/Option\";\nimport * as Ord from \"fp-ts/Ord\";\nimport { flow, increment, pipe } from \"fp-ts/function\";\n\nexport type Gender = \"male\" | \"female\";\n\nexport type Player = {\n    id: number;\n    name: string;\n    lastName: string;\n    number: number;\n    birthYear: number;\n    gender: Gender;\n};\n\nexport type RaceCategory = {\n    id: number;\n    name: string;\n    minAge?: number;\n    maxAge?: number;\n    gender?: Gender;\n};\n\nexport type TimeKeeperType = \"start\" | \"checkpoint\" | \"end\";\n\nexport type TimeKeeper = {\n    id: number;\n    name: string;\n    type: TimeKeeperType;\n};\n\nexport type TimeStamp = {\n    id: number;\n    playerId?: number;\n    timeKeeperId: number;\n    time: number;\n};\n\nexport type State = {\n    players: Player[];\n    timeKeepers: TimeKeeper[];\n    timeStamps: TimeStamp[];\n};\n\nexport type RaceResult = {\n    player: Omit<Player, \"id\">;\n    timeStamps: { [timeKeeperId: number]: number };\n};\n\nexport type RaceResults = RaceResult[];\n\nexport const getNextId = flow(\n    Arr.sortBy([\n        pipe(\n            N.Ord,\n            Ord.contramap((e: { id: number }) => e.id)\n        )\n    ]),\n    Arr.last,\n    Option.map((e) => e.id),\n    Option.fold(() => 0, increment)\n);\n\nexport const removeById = <T extends { id: number }>(items: T[], id: number) =>\n    pipe(\n        items,\n        Arr.filter((e) => e.id !== id)\n    );\n\nexport const register = (players: Player[], newPlayer: Omit<Player, \"id\">): Player[] =>\n    pipe(players, Arr.append({ ...newPlayer, id: getNextId(players) }));\n\nexport const changeInfo = (players: Player[], modifiedPlayer: Player): Player[] =>\n    pipe(\n        players,\n        Arr.updateAt(\n            pipe(\n                players,\n                Arr.findIndex((e) => e.id === modifiedPlayer.id),\n                Option.fold(\n                    () => -1,\n                    (e) => e\n                )\n            ),\n            modifiedPlayer\n        ),\n        Option.fold(\n            () => players,\n            (e) => e\n        )\n    );\n\nexport const addTimeKeeper = (timeKeepers: TimeKeeper[], newTimeKeeper: Omit<TimeKeeper, \"id\">): TimeKeeper[] =>\n    pipe(timeKeepers, Arr.append({ ...newTimeKeeper, id: getNextId(timeKeepers) }));\n\nexport const removeTimeKeeper = (timeKeepers: TimeKeeper[], id: number): TimeKeeper[] => removeById(timeKeepers, id);\n\nexport const addTimeStamp = (timeStamps: TimeStamp[], timeStamp: Omit<TimeStamp, \"id\">): TimeStamp[] =>\n    pipe(timeStamps, Arr.append({ ...timeStamp, id: getNextId(timeStamps) }));\n\nexport const resetTimeStamp = (timeStamps: TimeStamp[], id: number): TimeStamp[] => removeById(timeStamps, id);\n\nexport const assignPlayer = (\n    timeStamps: TimeStamp[],\n    modifiedTimeStamp: Pick<TimeStamp, \"id\" | \"playerId\">\n): TimeStamp[] =>\n    pipe(\n        timeStamps,\n        Arr.modifyAt(\n            pipe(\n                timeStamps,\n                Arr.findIndex((e) => e.id === modifiedTimeStamp.id),\n                Option.fold(\n                    () => -1,\n                    (e) => e\n                )\n            ),\n            (e) => ({ ...e, ...modifiedTimeStamp })\n        ),\n        Option.fold(\n            () => timeStamps,\n            (e) => e\n        )\n    );\n\nexport const addRaceCategory = (\n    raceCategories: RaceCategory[],\n    raceCategory: Omit<RaceCategory, \"id\">\n): RaceCategory[] => pipe(raceCategories, Arr.append({ ...raceCategory, id: getNextId(raceCategories) }));\n\nexport const removeRaceCategory = (raceCategories: RaceCategory[], id: number): RaceCategory[] =>\n    removeById(raceCategories, id);\n","import * as m from \"../model\";\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nexport type TimeStampsState = m.TimeStamp[];\n\nconst initialState: TimeStampsState = [];\n\nexport const timeStampsSlice = createSlice({\n    name: \"timeStamps\",\n    initialState,\n    reducers: {\n        add: (state, action: PayloadAction<Omit<m.TimeStamp, \"id\">>) => {\n            return m.addTimeStamp(state, action.payload);\n        },\n        assignPlayer: (state, action: PayloadAction<Pick<m.TimeStamp, \"id\" | \"playerId\">>) => {\n            return m.assignPlayer(state, action.payload);\n        },\n        reset: (state, action: PayloadAction<Pick<m.TimeStamp, \"id\">>) => {\n            return m.resetTimeStamp(state, action.payload.id);\n        }\n    }\n});\n\nexport const { add, reset, assignPlayer } = timeStampsSlice.actions;\n\nexport default timeStampsSlice.reducer;\n","import { Icon } from \"@mdi/react\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport {\n    mdiCog,\n    mdiDialpad,\n    mdiFormatListNumberedRtl,\n    mdiTimetable\n    } from \"@mdi/js\";\nimport { StopWatchMode } from \"../stopwatch-mode\";\n\ntype Paths = StopWatchMode | \"config\";\ntype BottomMenuButtonProps = { text: string; path: Paths; icon: string; chosenPath: Paths };\n\nconst BottomMenuButton = ({ text, path, icon, chosenPath: chosenMode }: BottomMenuButtonProps) => {\n    const opacity = path === chosenMode ? \"opacity-100\" : \"opacity-20\";\n    return (\n        <Link\n            to={`${process.env.PUBLIC_URL}/${path}`}\n            className={`${opacity} transition-opacity w-12 flex flex-col items-center px-4 py-2`}\n        >\n            <Icon color=\"white\" size={1} path={icon} />\n            <p className=\"text-xs text-white font-semibold\">{text}</p>\n        </Link>\n    );\n};\n\nexport const BottomMenu = () => {\n    const location = useLocation();\n    const mode = location.pathname.split(process.env.PUBLIC_URL)[1].slice(1) as Paths;\n\n    return (\n        <div className=\"flex justify-around text-black\">\n            <BottomMenuButton path=\"config\" text=\"Config\" icon={mdiCog} chosenPath={mode} />\n            <BottomMenuButton path=\"list\" text=\"Players\" icon={mdiFormatListNumberedRtl} chosenPath={mode} />\n            <BottomMenuButton path=\"pad\" text=\"Pad\" icon={mdiDialpad} chosenPath={mode} />\n            <BottomMenuButton path=\"times\" text=\"Times\" icon={mdiTimetable} chosenPath={mode} />\n        </div>\n    );\n};\n","import { createContext } from \"react\";\n\nexport const CurrentTimeKeeperContext = createContext<{\n    timeKeeperId?: number;\n    setTimeKeeperId: (timeKeeperId: number) => void;\n}>({\n    timeKeeperId: undefined,\n    setTimeKeeperId: () => {}\n});\n","import React from \"react\";\n\ntype Button = {\n    char: string;\n    changeNumber: (number: string) => string;\n    alwaysEnabled?: boolean;\n};\n\nconst padActions = {\n    addDigit: (digit: string) => (player: string) => player.concat(digit),\n    back: (player: string) => player.slice(0, -1),\n    reset: (player: string) => \"\"\n};\n\nconst buttons: Button[] = [\n    { char: \"1\", changeNumber: padActions.addDigit(\"1\") },\n    { char: \"2\", changeNumber: padActions.addDigit(\"2\") },\n    { char: \"3\", changeNumber: padActions.addDigit(\"3\") },\n    { char: \"4\", changeNumber: padActions.addDigit(\"4\") },\n    { char: \"5\", changeNumber: padActions.addDigit(\"5\") },\n    { char: \"6\", changeNumber: padActions.addDigit(\"6\") },\n    { char: \"7\", changeNumber: padActions.addDigit(\"7\") },\n    { char: \"8\", changeNumber: padActions.addDigit(\"8\") },\n    { char: \"9\", changeNumber: padActions.addDigit(\"9\") },\n    { char: \"↺\", changeNumber: padActions.reset, alwaysEnabled: true },\n    { char: \"0\", changeNumber: padActions.addDigit(\"0\") },\n    { char: \"←\", changeNumber: padActions.back, alwaysEnabled: true }\n];\n\ntype PadButtonProps = {\n    padClick: () => void;\n    char: string;\n    enabled: boolean;\n    alwaysEnabled?: boolean;\n};\nconst PadButton = ({ char, padClick, enabled, alwaysEnabled }: PadButtonProps) => (\n    <button\n        onClick={padClick}\n        disabled={!alwaysEnabled && !enabled}\n        className=\"disabled:opacity-20 text-2xl transition-opacity rounded-md text-white m-1.5 \"\n    >\n        {char}\n    </button>\n);\n\ntype DialPadProps = {\n    onNumberChange: (number: string) => void;\n    availableDigits: string[];\n    number: string;\n};\nexport const DialPad = (props: DialPadProps) => {\n    const onPadButtonClick = (button: Button) => {\n        const newNumber = button.changeNumber(props.number);\n        props.onNumberChange(newNumber);\n    };\n\n    return (\n        <div className=\"grid h-2/5 self-center w-5/6 grid-cols-3 py-2 grid-rows-4\">\n            {buttons.map((b) => (\n                <PadButton\n                    alwaysEnabled={b.alwaysEnabled}\n                    enabled={props.availableDigits.includes(b.char)}\n                    padClick={() => onPadButtonClick(b)}\n                    char={b.char}\n                    key={b.char}\n                />\n            ))}\n        </div>\n    );\n};\n","import * as Arr from \"fp-ts/Array\";\nimport * as S from \"fp-ts/string\";\nimport { flow, pipe } from \"fp-ts/function\";\n\nexport const formatNumber = (n: number, precision = 2) =>\n    n.toLocaleString(\"en-US\", { minimumIntegerDigits: precision });\n\nexport const formatTime = (time: Date) =>\n    `${formatNumber(time.getHours())}:${formatNumber(time.getMinutes())}:${formatNumber(\n        time.getSeconds()\n    )}.${formatNumber(time.getMilliseconds(), 3).slice(0, 1)}`;\n\nexport const getAvailableNumbers = (typedNumbers: string, allNumbers: number[]): number[] =>\n    typedNumbers !== \"\" ? pipe(allNumbers, Arr.filter(flow(String, S.startsWith(typedNumbers)))) : [];\n\nexport const getAvailableDigits = (typedNumbers: string, allNumbers: number[]): string[] =>\n    pipe(\n        allNumbers,\n        Arr.map(String),\n        Arr.filter(S.startsWith(typedNumbers)),\n        Arr.map((e) => S.slice(typedNumbers.length, e.length)(e)),\n        Arr.map(S.slice(0, 1)),\n        Arr.filter((s) => !!s)\n    );\n","import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\nimport type { TimerState, TimerDispatch } from \"@set/timer/store\";\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useTimerDispatch = () => useDispatch<TimerDispatch>();\nexport const useTimerSelector: TypedUseSelectorHook<TimerState> = useSelector;\n","import { DialPad } from \"./dial-pad\";\nimport { getAvailableDigits, getAvailableNumbers } from \"../utils\";\nimport { Player, TimeStamp } from \"@set/timer/model\";\nimport { useState } from \"react\";\nimport { useTimerSelector } from \"../hooks\";\n\ntype PlayerWithTimeStamp = Player & {\n    timeStamp?: TimeStamp;\n};\n\ntype TypedPlayerProps = {\n    playerNumber: string;\n};\n\nexport const TypedPlayer = ({ playerNumber }: TypedPlayerProps) => (\n    <div className=\"text-orange-500 h-16 flex text-center justify-center text-4xl font-regular py-2\">\n        {playerNumber}\n    </div>\n);\n\ntype CheckInPlayerProps = {\n    player: PlayerWithTimeStamp;\n    onPlayerCheckIn: (playerId: number) => void;\n};\nexport const CheckInPlayer = ({ player, onPlayerCheckIn }: CheckInPlayerProps) => (\n    <button\n        onClick={() => onPlayerCheckIn(player.id)}\n        className=\"bg-gradient-to-r from-orange-500 to-red-500 mt-2 flex w-full px-4 py-2 items-center shadow-md rounded-md\"\n    >\n        <div className=\"font-bold text-2xl mr-4\">{player.number}</div>\n        <div>\n            {player.name} {player.lastName}\n        </div>\n    </button>\n);\n\ntype PlayersDialPadProps = {\n    onPlayerCheckIn: (playerId: number) => void;\n    title?: string;\n    timeKeeperId?: number;\n};\n\nexport const PlayersDialPad = ({ onPlayerCheckIn, title, timeKeeperId }: PlayersDialPadProps) => {\n    const [playerNumber, setPlayerNumber] = useState(\"\");\n    const allPlayers = useTimerSelector((x) => x.players);\n    const allTimeStamps = useTimerSelector((x) => x.timeStamps);\n\n    const playersWithTimeStamps = allPlayers.map((x) => ({\n        ...x,\n        timeStamp: allTimeStamps.find((a) => a.playerId === x.id && a.timeKeeperId === timeKeeperId)\n    }));\n\n    const playersWithoutTimeStamps = playersWithTimeStamps.filter((x) => x.timeStamp === undefined);\n    const playersNumbersWithoutTimeStamps = playersWithoutTimeStamps.map((x) => x.number);\n\n    const availableNumbers = getAvailableNumbers(playerNumber, playersNumbersWithoutTimeStamps);\n    const availablePlayers = playersWithoutTimeStamps.filter((p) => availableNumbers.includes(p.number));\n\n    return (\n        <div className=\"flex h-full flex-col\">\n            {title && <h1 className=\"text-2xl text-center py-4\">{title}</h1>}\n            <div className=\"flex-auto flex flex-col-reverse mx-12 overflow-y-auto mt-2 items-stretch h-3/5\">\n                {availablePlayers.map((p) => (\n                    <CheckInPlayer\n                        key={p.id}\n                        onPlayerCheckIn={(playerId) => {\n                            onPlayerCheckIn(playerId);\n                            setPlayerNumber(\"\");\n                        }}\n                        player={p}\n                    />\n                ))}\n            </div>\n            <TypedPlayer playerNumber={playerNumber} />\n            <DialPad\n                availableDigits={getAvailableDigits(playerNumber, playersNumbersWithoutTimeStamps)}\n                number={playerNumber}\n                onNumberChange={setPlayerNumber}\n            />\n        </div>\n    );\n};\n","import { formatNumber, formatTime } from \"../utils\";\nimport { Player, TimeStamp } from \"@set/timer/model\";\n\ntype PlayerWithTimeStamp = Player & {\n    timeStamp?: TimeStamp;\n};\n\nexport const PlayerWithTimeStampDisplay = ({\n    playerWithTimeStamp\n}: {\n    playerWithTimeStamp: Partial<PlayerWithTimeStamp>;\n}) => (\n    <span className=\"flex flex-grow h-12\">\n        <span className=\"text-3xl mr-4\">\n            {playerWithTimeStamp.number ? formatNumber(playerWithTimeStamp.number, 3) : \"- - -\"}\n        </span>\n        <span className=\"flex-grow\">\n            <div className=\"text-lg font-semibold \">\n                <span>\n                    {playerWithTimeStamp.timeStamp\n                        ? formatTime(new Date(playerWithTimeStamp.timeStamp.time))\n                        : \"- - - - - - -\"}\n                </span>\n            </div>\n            <div className=\"opacity-50 text-sm\">\n                {playerWithTimeStamp.name} {playerWithTimeStamp.lastName}\n            </div>\n        </span>\n    </span>\n);\n","import Icon from \"@mdi/react\";\n\nexport const PrimaryActionButton = ({ onClick, icon }: { onClick: () => void; icon: string }) => (\n    <button\n        onClick={onClick}\n        className=\"w-10 bg-gradient-to-r from-orange-500 to-red-500 flex items-center rounded-md px-2 py-1 self-center text-white\"\n    >\n        <Icon path={icon} size={1} color=\"white\" />\n    </button>\n);\n\nexport const ActionButton = ({\n    onClick,\n    icon,\n    contents\n}: {\n    onClick: () => void;\n    icon?: string;\n    contents?: JSX.Element;\n}) => (\n    <button\n        onClick={onClick}\n        className=\"w-10 bg-gray-600 flex items-center rounded-md px-2 py-1 self-center text-white\"\n    >\n        {icon && <Icon path={icon} size={1} color=\"white\" />}\n        {contents}\n    </button>\n);\n","import Icon from \"@mdi/react\";\nimport {\n    mdiAccountSupervisor,\n    mdiAlarmCheck,\n    mdiAlarmOff,\n    mdiWrench\n    } from \"@mdi/js\";\nimport { Player, TimeStamp } from \"@set/timer/model\";\nimport { PlayerWithTimeStampDisplay } from \"./player-with-timestamp-display\";\nimport { PrimaryActionButton } from \"./action-button\";\n\ntype PlayerWithTimeStamp = Player & {\n    timeStamp?: TimeStamp;\n};\n\ntype PlayersListProps = {\n    players: PlayerWithTimeStamp[];\n    onTimeRecord: (playerId: number) => void;\n    onTimeReset: (timeStampId: number) => void;\n};\n\nexport const PlayersList = ({ players, onTimeRecord, onTimeReset }: PlayersListProps) => {\n    const onReset = (id: number) => () => onTimeReset(id);\n    const onRecord = (id: number) => () => onTimeRecord(id);\n    return (\n        <div className=\"px-4 text-white\">\n            {players.map((p) => (\n                <div key={p.number} className=\"py-5 flex items-center\">\n                    <PlayerWithTimeStampDisplay playerWithTimeStamp={p} />\n                    {p.timeStamp ? (\n                        <PrimaryActionButton icon={mdiAlarmOff} onClick={onReset(p.timeStamp.id)} />\n                    ) : (\n                        <PrimaryActionButton icon={mdiAlarmCheck} onClick={onRecord(p.id)} />\n                    )}\n                    {p.timeStamp && (\n                        <>\n                            <span className=\"ml-1 bg-gray-600 flex items-center rounded-md px-2 py-1 text-white\">\n                                <Icon path={mdiWrench} size={1} color=\"white\" />\n                            </span>\n                            <span className=\"ml-1 bg-gray-600 flex items-center rounded-md px-2 py-1 text-white\">\n                                <Icon path={mdiAccountSupervisor} size={1} color=\"white\" />\n                            </span>\n                        </>\n                    )}\n                </div>\n            ))}\n        </div>\n    );\n};\n","import usePortal from \"react-useportal\";\nimport { ActionButton, PrimaryActionButton } from \"./action-button\";\nimport { assignPlayer, reset } from \"@set/timer/slices/time-stamps\";\nimport { Icon } from \"@mdi/react\";\nimport { mdiAccountAlertOutline, mdiDeleteOutline, mdiPlusCircleOutline } from \"@mdi/js\";\nimport { Player, TimeStamp } from \"@set/timer/model\";\nimport { PlayersDialPad } from \"./players-dial-pad\";\nimport { PlayerWithTimeStampDisplay } from \"./player-with-timestamp-display\";\nimport { useState } from \"react\";\nimport { useTimerDispatch } from \"../hooks\";\n\ntype TimeStampWithPlayer = TimeStamp & {\n    player?: Player;\n};\n\ntype PlayersTimesProps = {\n    times: TimeStampWithPlayer[];\n    onAddTime: () => void;\n};\n\nconst sort = (times: TimeStampWithPlayer[]) => [...times].sort((a, b) => b.time - a.time);\n\nexport const PlayersTimes = ({ times, onAddTime }: PlayersTimesProps) => {\n    const [timeStampToAssign, setTimeStampToAssign] = useState<number>();\n    const { Portal } = usePortal({ bindTo: document.getElementById(\"module-holder\") as HTMLElement });\n    const dispatch = useTimerDispatch();\n\n    return (\n        <div className=\"px-4\">\n            {timeStampToAssign !== undefined && (\n                <Portal>\n                    <div className=\"absolute inset-0 h-full w-full bg-gray-800\">\n                        <PlayersDialPad\n                            onPlayerCheckIn={(playerId) => {\n                                dispatch(assignPlayer({ playerId, id: timeStampToAssign }));\n                                setTimeStampToAssign(undefined);\n                            }}\n                            title=\"Assign time to player\"\n                        />\n                    </div>\n                </Portal>\n            )}\n            <div className=\"flex flex-col mt-2\">\n                <button\n                    onClick={onAddTime}\n                    className=\"self-end rounded-md text-center bg-gradient-to-r w-20 flex justify-center from-orange-500 to-red-500 py-2 px-4\"\n                >\n                    <Icon color=\"white\" size={1} path={mdiPlusCircleOutline} />\n                </button>\n            </div>\n            {sort(times).map((t) => (\n                <div key={t.id} className=\"flex py-5 items-center\">\n                    <PlayerWithTimeStampDisplay\n                        playerWithTimeStamp={{\n                            timeStamp: t,\n                            number: t.player?.number,\n                            name: t.player?.name,\n                            lastName: t.player?.lastName\n                        }}\n                    />\n                    {!t.player && (\n                        <PrimaryActionButton onClick={() => setTimeStampToAssign(t.id)} icon={mdiAccountAlertOutline} />\n                    )}\n                    <span className=\"ml-1\">\n                        <ActionButton\n                            icon={mdiDeleteOutline}\n                            onClick={() => {\n                                dispatch(reset({ id: t.id }));\n                            }}\n                        />\n                    </span>\n                </div>\n            ))}\n        </div>\n    );\n};\n","import { io as ioClient } from \"socket.io-client\";\n\nconst io = (\n    process.env.NODE_ENV === \"production\" ? require(\"socket.io-client/dist/socket.io\") : require(\"socket.io-client\")\n) as typeof ioClient;\n\nconst hubUrl = process.env.NODE_ENV === \"production\" ? \"wss://wss.set-hub.pyszstudio.pl\" : \"ws://localhost:21822\";\n\nexport const socket = io(hubUrl, { transports: [\"websocket\"] });\n\nexport type ConnectionState = \"connected\" | \"reconnecting\" | \"disconnected\" | \"error\";\n\ntype ConnectionStateHandler = (s: ConnectionState) => void;\nconst onStateChangedHandlers = [] as ConnectionStateHandler[];\nexport const onConnectionStateChanged = (handler: ConnectionStateHandler) => {\n    onStateChangedHandlers.push(handler);\n    return () => {\n        onStateChangedHandlers.splice(onStateChangedHandlers.indexOf(handler), 1);\n    };\n}; //possible memory leaks\n\nconst runStateChangedHandlers = (s: ConnectionState) => onStateChangedHandlers.forEach((x) => x(s));\n\nsocket.on(\"connect\", () => {\n    runStateChangedHandlers(\"connected\");\n});\n\nsocket.on(\"disconnect\", (r) => {\n    runStateChangedHandlers(\"disconnected\");\n});\n\nsocket.on(\"connect_failed\", () => {\n    runStateChangedHandlers(\"disconnected\");\n});\n\nsocket.io.on(\"error\", () => {\n    runStateChangedHandlers(\"error\");\n});\n\nsocket.io.on(\"reconnect\", (attempt) => {\n    runStateChangedHandlers(\"connected\");\n});\n\nsocket.io.on(\"reconnect_error\", (error) => {\n    runStateChangedHandlers(\"reconnecting\");\n});\n\nsocket.io.on(\"reconnect_attempt\", (attempt) => {\n    runStateChangedHandlers(\"reconnecting\");\n});\n\nsocket.io.on(\"reconnect_failed\", () => {\n    runStateChangedHandlers(\"disconnected\");\n});\n","import { Icon } from \"@mdi/react\";\nimport { mdiFlagCheckered, mdiRayStartArrow, mdiRayVertex } from \"@mdi/js\";\nimport { TimeKeeperType } from \"../../../timer/model\";\n\nconst getIconFromType = (type: TimeKeeperType) => {\n    switch (type) {\n        case \"start\":\n            return mdiRayStartArrow;\n        case \"checkpoint\":\n            return mdiRayVertex;\n        case \"end\":\n            return mdiFlagCheckered;\n        default:\n            throw new Error(\"Not handled time keeper type\");\n    }\n};\n\nexport const TimeKeeperIcon = ({ type }: { type: TimeKeeperType }) => <Icon size={1} path={getIconFromType(type)} />;\n","import { formatTime } from \"../utils\";\nimport { useEffect, useState } from \"react\";\n\nconst Time = ({ time }: { time: Date }) => <div className=\"w-24 text-xl\">{formatTime(time)}</div>;\n\nexport const Timer = () => {\n    const [time, setTime] = useState<Date>(new Date());\n\n    useEffect(() => {\n        setInterval(() => setTime(new Date()), 10);\n    }, []);\n\n    return <Time time={time} />;\n};\n","import { ConnectionState, onConnectionStateChanged } from \"../connection\";\nimport { CurrentTimeKeeperContext } from \"../contexts/current-time-keeper\";\nimport { Icon } from \"@mdi/react\";\nimport {\n    mdiCloudOffOutline,\n    mdiCloudOutline,\n    mdiCloudSyncOutline,\n    mdiWeatherCloudyAlert\n    } from \"@mdi/js\";\nimport { TimeKeeperIcon } from \"./time-keeper-icon\";\nimport { Timer } from \"./timer\";\nimport { useEffect, useState } from \"react\";\nimport { useTimerSelector } from \"../hooks\";\n\nconst getIconFromConnectionState = (state: ConnectionState) => {\n    switch (state) {\n        case \"connected\":\n            return mdiCloudOutline;\n        case \"disconnected\":\n            return mdiCloudOffOutline;\n        case \"error\":\n            return mdiWeatherCloudyAlert;\n        case \"reconnecting\":\n            return mdiCloudSyncOutline;\n        default:\n            throw new Error(\"not handled connection state\");\n    }\n};\n\nconst getTextFromConnectionState = (state: ConnectionState) => {\n    switch (state) {\n        case \"connected\":\n            return \"ON-LINE\";\n        case \"disconnected\":\n        case \"error\":\n            return \"OFF-LINE\";\n        case \"reconnecting\":\n            return \"CONNECTING\";\n        default:\n            throw new Error(\"not handled connection state\");\n    }\n};\n\ntype StatusProps = { timeKeeperName?: string };\nexport const Status = ({ timeKeeperName }: StatusProps) => {\n    const [connectionState, setConnectionState] = useState<ConnectionState>(\"disconnected\");\n    const allTimeKeepers = useTimerSelector((x) => x.timeKeepers);\n\n    useEffect(() => {\n        const unregister = onConnectionStateChanged(setConnectionState);\n        return () => unregister();\n    }, []);\n\n    return (\n        <CurrentTimeKeeperContext.Consumer>\n            {({ timeKeeperId }) => (\n                <div className=\"px-5 w-screen flex-shrink-0 flex items-center justify-between bg-gradient-to-r from-orange-500 to-red-500 font-semibold h-10\">\n                    <span className=\"flex\">\n                        {timeKeeperId !== undefined && (\n                            <TimeKeeperIcon type={allTimeKeepers.find((tk) => tk.id === timeKeeperId)!.type} />\n                        )}\n                        <span>{timeKeeperName ?? \"NO_TIMEKEPER\"}</span>\n                    </span>\n                    <Timer />\n                    <span className=\"text-xs flex items-center\">\n                        <span className=\"mr-2\">{getTextFromConnectionState(connectionState)}</span>\n                        <Icon path={getIconFromConnectionState(connectionState)} size={1} />\n                    </span>\n                </div>\n            )}\n        </CurrentTimeKeeperContext.Consumer>\n    );\n};\n","import { CurrentTimeKeeperContext } from \"../contexts/current-time-keeper\";\nimport { TimeKeeperIcon } from \"./time-keeper-icon\";\nimport { useTimerSelector } from \"../hooks\";\n\nexport const TimeKeeperSelector = () => {\n    const allTimeKeepers = useTimerSelector((x) => x.timeKeepers);\n\n    return (\n        <CurrentTimeKeeperContext.Consumer>\n            {({ setTimeKeeperId }) => (\n                <div className=\"flex h-full w-full justify-center items-start bg-gray-800 pl-20 flex-col\">\n                    {allTimeKeepers.map((tk) => (\n                        <button\n                            onClick={() => setTimeKeeperId(tk.id)}\n                            className=\"flex items-center py-4 px-4 my-2\"\n                            key={tk.id}\n                        >\n                            <TimeKeeperIcon type={tk.type} />\n                            <span className=\"ml-4 text-xl\">{tk.name}</span>\n                        </button>\n                    ))}\n                </div>\n            )}\n        </CurrentTimeKeeperContext.Consumer>\n    );\n};\n","import { add, reset } from \"@set/timer/slices/time-stamps\";\nimport { BottomMenu } from \"./components/bottom-menu\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { CurrentTimeKeeperContext } from \"./contexts/current-time-keeper\";\nimport { PlayersDialPad } from \"./components/players-dial-pad\";\nimport { PlayersList } from \"./components/players-list\";\nimport { PlayersTimes } from \"./components/players-times\";\nimport { Status } from \"./components/status\";\nimport { TimeKeeperSelector } from \"./components/time-keeper-selector\";\nimport { useState } from \"react\";\nimport { useTimerDispatch, useTimerSelector } from \"./hooks\";\nfunction App() {\n    const allPlayers = useTimerSelector((x) => x.players);\n    const allTimeStamps = useTimerSelector((x) => x.timeStamps);\n    const [selectedTimeKeeper, setSelectedTimeKeeper] = useState<number>();\n    const allTimeKeepers = useTimerSelector((x) => x.timeKeepers);\n\n    const dispatch = useTimerDispatch();\n\n    const playersWithTimeStamps = (timeKeeperId: number) =>\n        allPlayers.map((x) => ({\n            ...x,\n            timeStamp: allTimeStamps.find((a) => a.playerId === x.id && a.timeKeeperId === timeKeeperId)\n        }));\n\n    const timeStampsWithPlayers = (timeKeeperId: number) =>\n        allTimeStamps\n            .filter((s) => s.timeKeeperId === timeKeeperId)\n            .map((s) => ({\n                ...s,\n                player: allPlayers.find((p) => s.playerId === p.id)\n            }));\n\n    return (\n        <CurrentTimeKeeperContext.Provider\n            value={{ timeKeeperId: selectedTimeKeeper, setTimeKeeperId: setSelectedTimeKeeper }}\n        >\n            <Router>\n                <div id=\"app-holder\" className=\"flex flex-col overflow-hidden bg-gray-800 h-full w-screen text-white\">\n                    <Status timeKeeperName={allTimeKeepers.find((tk) => tk.id === selectedTimeKeeper)?.name} />\n                    <div id=\"module-holder\" className=\"relative overflow-hidden flex-col flex-1\">\n                        <div className=\"h-full flex-1 overflow-y-scroll\">\n                            <CurrentTimeKeeperContext.Consumer>\n                                {({ timeKeeperId }) => (\n                                    <Switch>\n                                        <Route exact path={`${process.env.PUBLIC_URL}/config`}>\n                                            <TimeKeeperSelector></TimeKeeperSelector>\n                                        </Route>\n                                        {timeKeeperId !== undefined && (\n                                            <>\n                                                <Route exact path={`${process.env.PUBLIC_URL}/list`}>\n                                                    <PlayersList\n                                                        onTimeRecord={(playerId) =>\n                                                            dispatch(\n                                                                add({\n                                                                    playerId,\n                                                                    timeKeeperId,\n                                                                    time: new Date().getTime()\n                                                                })\n                                                            )\n                                                        }\n                                                        onTimeReset={(timeStampId) =>\n                                                            dispatch(reset({ id: timeStampId }))\n                                                        }\n                                                        players={playersWithTimeStamps(timeKeeperId)}\n                                                    />\n                                                </Route>\n                                                <Route exact path={`${process.env.PUBLIC_URL}/pad`}>\n                                                    <PlayersDialPad\n                                                        onPlayerCheckIn={(playerId) => {\n                                                            dispatch(\n                                                                add({\n                                                                    playerId,\n                                                                    timeKeeperId,\n                                                                    time: new Date().getTime()\n                                                                })\n                                                            );\n                                                        }}\n                                                        title={\"Clock in player\"}\n                                                        timeKeeperId={selectedTimeKeeper}\n                                                    />\n                                                </Route>\n                                                <Route exact path={`${process.env.PUBLIC_URL}/times`}>\n                                                    <PlayersTimes\n                                                        onAddTime={() => {\n                                                            dispatch(add({ timeKeeperId, time: new Date().getTime() }));\n                                                        }}\n                                                        times={timeStampsWithPlayers(timeKeeperId)}\n                                                    />\n                                                </Route>\n                                            </>\n                                        )}\n                                    </Switch>\n                                )}\n                            </CurrentTimeKeeperContext.Consumer>\n                        </div>\n                    </div>\n                    <div>\n                        <BottomMenu />\n                    </div>\n                </div>\n            </Router>\n        </CurrentTimeKeeperContext.Provider>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import * as m from \"../model\";\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nexport type PlayersState = m.Player[];\n\nconst initialState: PlayersState = [];\n\nexport const playersSlice = createSlice({\n    name: \"players\",\n    initialState,\n    reducers: {\n        register: (state, action: PayloadAction<Omit<m.Player, \"id\">>) => {\n            return m.register(state, action.payload);\n        },\n        changeInfo: (state, action: PayloadAction<m.Player>) => {\n            return m.changeInfo(state, action.payload);\n        }\n    }\n});\n\nexport const { register, changeInfo } = playersSlice.actions;\n\nexport default playersSlice.reducer;\n","import * as m from \"../model\";\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nexport type RaceCategoriesState = m.RaceCategory[];\n\nconst initialState: RaceCategoriesState = [];\n\nexport const raceCategoriesSlice = createSlice({\n    name: \"raceCategories\",\n    initialState,\n    reducers: {\n        add: (state, action: PayloadAction<Omit<m.RaceCategory, \"id\">>) => {\n            return m.addRaceCategory(state, action.payload);\n        },\n        remove: (state, action: PayloadAction<Pick<m.RaceCategory, \"id\">>) => {\n            return m.removeRaceCategory(state, action.payload.id);\n        }\n    }\n});\n\nexport const { add, remove } = raceCategoriesSlice.actions;\n\nexport default raceCategoriesSlice.reducer;\n","import * as m from \"../model\";\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nexport type TimeKeepersState = m.TimeKeeper[];\n\nconst initialState: TimeKeepersState = [];\n\nexport const timeKeepersSlice = createSlice({\n    name: \"timeKeepers\",\n    initialState,\n    reducers: {\n        add: (state, action: PayloadAction<Omit<m.TimeKeeper, \"id\">>) => {\n            return m.addTimeKeeper(state, action.payload);\n        },\n        remove: (state, action: PayloadAction<Pick<m.TimeKeeper, \"id\">>) => {\n            return m.removeTimeKeeper(state, action.payload.id);\n        }\n    }\n});\n\nexport const { add, remove } = timeKeepersSlice.actions;\n\nexport default timeKeepersSlice.reducer;\n","import players from \"./slices/players\";\nimport raceCategories from \"./slices/race-categories\";\nimport timeKeepers from \"./slices/time-keepers\";\nimport timeStamps from \"./slices/time-stamps\";\nimport {\n    AnyAction,\n    combineReducers,\n    configureStore,\n    Middleware\n    } from \"@reduxjs/toolkit\";\n\nconst reducer = combineReducers({ players, timeKeepers, timeStamps, raceCategories });\n\nconst resettableRootReducer = (state: TimerState, action: AnyAction) => {\n    if (action.type === \"REPLACE_STATE\") {\n        return action.state as TimerState;\n    }\n    return reducer(state, action) as TimerState;\n};\n\nexport const createStore = (middlewares: Middleware<{}, TimerState, TimerDispatch>[]) =>\n    configureStore({\n        reducer: resettableRootReducer as any,\n        middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(middlewares)\n    });\n\n//store created only for typechecking\nconst store = configureStore({\n    reducer\n});\n\n// Infer the `TimerState` and `TimerDispatch` types from the store itself\nexport type TimerState = ReturnType<typeof store.getState>;\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type TimerDispatch = typeof store.dispatch;\n","import App from \"./App\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { createStore, TimerDispatch, TimerState } from \"@set/timer/store\";\nimport { Middleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport { socket } from \"./connection\";\nimport \"./index.scss\";\n\nsocket.on(\"receive-action\", (action) => store.dispatch({ ...action, __remote: true }));\nsocket.on(\"receive-state\", (state) => store.dispatch({ type: \"REPLACE_STATE\", state, __remote: true }));\nexport const postActionsMiddleware: Middleware<{}, TimerState, TimerDispatch> = (storeApi) => (next) => (action) => {\n    if (!action.__remote && socket.connected) socket.emit(\"post-action\", action);\n\n    next(action);\n};\n\nconst store = createStore([postActionsMiddleware]);\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}