{"version":3,"sources":["../../timer/model.ts","../../timer/slices/time-stamps.ts","contexts/current-time-keeper.tsx","components/dial-pad.tsx","utils.ts","hooks.ts","components/players-dial-pad.tsx","components/player-with-timestamp-display.tsx","components/action-button.tsx","components/players-list.tsx","components/players-times.tsx","connection.ts","components/time-keeper-icon.tsx","components/time-keeper-selector.tsx","components/timer.tsx","components/status.tsx","components/stopwatch-mode-switch.tsx","App.tsx","reportWebVitals.ts","../../timer/slices/players.ts","../../timer/slices/race-categories.ts","../../timer/slices/time-keepers.ts","../../timer/store.ts","index.tsx"],"names":["getNextId","flow","Arr","pipe","N","Ord","e","id","Option","increment","removeById","items","timeStampsSlice","createSlice","name","initialState","reducers","add","state","action","timeStamps","timeStamp","payload","assignPlayer","modifiedTimeStamp","reset","actions","CurrentTimeKeeperContext","createContext","timeKeeperId","undefined","setTimeKeeperId","padActions","addDigit","digit","player","concat","back","slice","buttons","char","changeNumber","alwaysEnabled","PadButton","padClick","enabled","onClick","disabled","className","DialPad","props","map","b","availableDigits","includes","button","newNumber","number","onNumberChange","onPadButtonClick","formatNumber","n","precision","toLocaleString","minimumIntegerDigits","formatTime","time","getHours","getMinutes","getSeconds","getMilliseconds","getAvailableDigits","typedNumbers","allNumbers","String","S","length","s","useTimerDispatch","useDispatch","useTimerSelector","useSelector","TypedPlayer","playerNumber","CheckInPlayer","onPlayerCheckIn","lastName","PlayersDialPad","title","useState","setPlayerNumber","allPlayers","x","players","allTimeStamps","playersWithoutTimeStamps","find","a","playerId","filter","playersNumbersWithoutTimeStamps","availableNumbers","availablePlayers","p","PlayerWithTimeStampDisplay","playerWithTimeStamp","Date","PrimaryActionButton","icon","path","size","color","ActionButton","contents","PlayersList","onTimeRecord","onTimeReset","onRecord","mdiAlarmOff","mdiAlarmCheck","mdiWrench","mdiAccountSupervisor","sort","times","PlayersTimes","onAddTime","timeStampToAssign","setTimeStampToAssign","Portal","usePortal","bindTo","document","getElementById","dispatch","Icon","mdiPlusCircleOutline","t","mdiAccountAlertOutline","mdiDeleteOutline","socket","require","io","transports","onStateChangedHandlers","runStateChangedHandlers","forEach","on","r","attempt","error","getIconFromType","type","mdiRayStartArrow","mdiRayVertex","mdiFlagCheckered","Error","TimeKeeperIcon","TimeKeeperSelector","timeKeepers","timeKeeperChosen","tk","Time","Timer","setTime","useEffect","setInterval","getIconFromConnectionState","mdiCloudOutline","mdiCloudOffOutline","mdiWeatherCloudyAlert","mdiCloudSyncOutline","getTextFromConnectionState","Status","timeKeeperName","connectionState","setConnectionState","showTimeKeeperSelector","setShowTimeKeeperSelector","allTimeKeepers","handler","unregister","push","splice","indexOf","Consumer","selectedTimeKeeper","StopWatchModeSwitchButton","text","mode","opacity","chosenMode","to","process","StopWatchModeSwitch","mdiFormatListNumberedRtl","mdiDialpad","mdiTimetable","App","setSelectedTimeKeeper","playersWithTimeStamps","timeStampsWithPlayers","Provider","value","exact","getTime","timeStampId","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","playersSlice","register","newPlayer","changeInfo","modifiedPlayer","raceCategoriesSlice","raceCategories","raceCategory","remove","timeKeepersSlice","newTimeKeeper","reducer","combineReducers","resettableRootReducer","configureStore","store","__remote","middlewares","postActionsMiddleware","storeApi","next","connected","emit","middleware","getDefaultMiddleware","ReactDOM","render","StrictMode"],"mappings":"8PAqDaA,EAAYC,YACrBC,IAAW,CACPC,YACIC,IACAC,KAAc,SAACC,GAAD,OAAuBA,EAAEC,SAG/CL,IACAM,KAAW,SAACF,GAAD,OAAOA,EAAEC,MACpBC,KAAY,kBAAM,IAAGC,MAGZC,EAAa,SAA2BC,EAAYJ,GAAvC,OACtBJ,YACIQ,EACAT,KAAW,SAACI,GAAD,OAAOA,EAAEC,KAAOA,O,QC7DtBK,EAAkBC,YAAY,CACvCC,KAAM,aACNC,aAJkC,GAKlCC,SAAU,CACNC,IAAK,SAACC,EAAOC,GACT,ODuFiBC,ECvFKF,EDuFoBG,ECvFbF,EAAOG,QDwF5CnB,YAAKiB,EAAYlB,IAAA,2BAAgBmB,GAAhB,IAA2Bd,GAAIP,EAAUoB,OADlC,IAACA,EAAyBC,GCrF9CE,aAAc,SAACL,EAAOC,GAClB,OD0FRC,EC1F8BF,ED2F9BM,EC3FqCL,EAAOG,QD6F5CnB,YACIiB,EACAlB,IACIC,YACIiB,EACAlB,KAAc,SAACI,GAAD,OAAOA,EAAEC,KAAOiB,EAAkBjB,MAChDC,KACI,kBAAO,KACP,SAACF,GAAD,OAAOA,OAGf,SAACA,GAAD,mBAAC,eAAYA,GAAMkB,MAEvBhB,KACI,kBAAMY,KACN,SAACd,GAAD,OAAOA,MAnBS,IACxBc,EACAI,GCzFIC,MAAO,SAACP,EAAOC,GACX,ODoFmBC,ECpFKF,EDoFoBX,ECpFbY,EAAOG,QAAQf,GDoF0BG,EAAWU,EAAYb,GAA7E,IAACa,EAAyBb,MC/EjD,EAAqCK,EAAgBc,QAA7CT,EAAR,EAAQA,IAAKQ,EAAb,EAAaA,MAAOF,EAApB,EAAoBA,aAEZX,IAAf,Q,+BCvBae,EAA2BC,wBAGrC,CACCC,kBAAcC,EACdC,gBAAiB,e,OCCfC,EAAa,CACfC,SAAU,SAACC,GAAD,OAAmB,SAACC,GAAD,OAAoBA,EAAOC,OAAOF,KAC/DG,KAAM,SAACF,GAAD,OAAoBA,EAAOG,MAAM,GAAI,IAC3Cb,MAAO,SAACU,GAAD,MAAoB,KAGzBI,EAAoB,CACtB,CAAEC,KAAM,IAAKC,aAAcT,EAAWC,SAAS,MAC/C,CAAEO,KAAM,IAAKC,aAAcT,EAAWC,SAAS,MAC/C,CAAEO,KAAM,IAAKC,aAAcT,EAAWC,SAAS,MAC/C,CAAEO,KAAM,IAAKC,aAAcT,EAAWC,SAAS,MAC/C,CAAEO,KAAM,IAAKC,aAAcT,EAAWC,SAAS,MAC/C,CAAEO,KAAM,IAAKC,aAAcT,EAAWC,SAAS,MAC/C,CAAEO,KAAM,IAAKC,aAAcT,EAAWC,SAAS,MAC/C,CAAEO,KAAM,IAAKC,aAAcT,EAAWC,SAAS,MAC/C,CAAEO,KAAM,IAAKC,aAAcT,EAAWC,SAAS,MAC/C,CAAEO,KAAM,SAAKC,aAAcT,EAAWP,MAAOiB,eAAe,GAC5D,CAAEF,KAAM,IAAKC,aAAcT,EAAWC,SAAS,MAC/C,CAAEO,KAAM,SAAKC,aAAcT,EAAWK,KAAMK,eAAe,IASzDC,EAAY,SAAC,GAAD,IAAGH,EAAH,EAAGA,KAAMI,EAAT,EAASA,SAAUC,EAAnB,EAAmBA,QAASH,EAA5B,EAA4BA,cAA5B,OACd,wBACII,QAASF,EACTG,UAAWL,IAAkBG,EAC7BG,UAAU,+EAHd,SAKKR,KASIS,EAAU,SAACC,GAMpB,OACI,qBAAKF,UAAU,4DAAf,SACKT,EAAQY,KAAI,SAACC,GAAD,OACT,cAAC,EAAD,CACIV,cAAeU,EAAEV,cACjBG,QAASK,EAAMG,gBAAgBC,SAASF,EAAEZ,MAC1CI,SAAU,kBAXD,SAACW,GACtB,IAAMC,EAAYD,EAAOd,aAAaS,EAAMO,QAC5CP,EAAMQ,eAAeF,GASOG,CAAiBP,IACjCZ,KAAMY,EAAEZ,MACHY,EAAEZ,Y,QC5DdoB,EAAe,SAACC,GAAD,IAAYC,EAAZ,uDAAwB,EAAxB,OACxBD,EAAEE,eAAe,QAAS,CAAEC,qBAAsBF,KAEzCG,EAAa,SAACC,GAAD,gBACnBN,EAAaM,EAAKC,YADC,YACcP,EAAaM,EAAKE,cADhC,YACiDR,EACnEM,EAAKG,cAFa,YAGjBT,EAAaM,EAAKI,kBAAmB,GAAGhC,MAAM,EAAG,KAK7CiC,EAAqB,SAACC,EAAsBC,GAAvB,OAC9BtE,YACIsE,EACAvE,IAAQwE,QACRxE,IAAWyE,IAAaH,IACxBtE,KAAQ,SAACI,GAAD,OAAOqE,IAAQH,EAAaI,OAAQtE,EAAEsE,OAA/BD,CAAuCrE,MACtDJ,IAAQyE,IAAQ,EAAG,IACnBzE,KAAW,SAAC2E,GAAD,QAASA,O,QClBfC,EAAmB,kBAAMC,eACzBC,EAAqDC,ICSrDC,EAAc,SAAC,GAAD,IAAGC,EAAH,EAAGA,aAAH,OACvB,qBAAKnC,UAAU,kFAAf,SACKmC,KAQIC,EAAgB,SAAC,GAAD,IAAGjD,EAAH,EAAGA,OAAQkD,EAAX,EAAWA,gBAAX,OACzB,yBACIvC,QAAS,kBAAMuC,EAAgBlD,EAAO5B,KACtCyC,UAAU,2GAFd,UAII,qBAAKA,UAAU,0BAAf,SAA0Cb,EAAOsB,SACjD,gCACKtB,EAAOrB,KADZ,IACmBqB,EAAOmD,gBAWrBC,EAAiB,SAAC,GAAmE,IF9B9Df,EAAsBC,EE8BzBY,EAAgE,EAAhEA,gBAAiBG,EAA+C,EAA/CA,MAAO3D,EAAwC,EAAxCA,aACrD,EAAwC4D,mBAAS,IAAjD,mBAAON,EAAP,KAAqBO,EAArB,KACMC,EAAaX,GAAiB,SAACY,GAAD,OAAOA,EAAEC,WACvCC,EAAgBd,GAAiB,SAACY,GAAD,OAAOA,EAAExE,cAO1C2E,EALwBJ,EAAWxC,KAAI,SAACyC,GAAD,mBAAC,eACvCA,GADsC,IAEzCvE,UAAWyE,EAAcE,MAAK,SAACC,GAAD,OAAOA,EAAEC,WAAaN,EAAErF,IAAM0F,EAAEpE,eAAiBA,UAG5BsE,QAAO,SAACP,GAAD,YAAuB9D,IAAhB8D,EAAEvE,aACjE+E,EAAkCL,EAAyB5C,KAAI,SAACyC,GAAD,OAAOA,EAAEnC,UAExE4C,GF3CgD5B,EE2CK2B,EF1C1C,MADe5B,EE2CaW,GF1CvBhF,YAAKsE,EAAYvE,IAAWD,YAAKyE,OAAQC,IAAaH,MAAmB,IE2CzF8B,EAAmBP,EAAyBI,QAAO,SAACI,GAAD,OAAOF,EAAiB/C,SAASiD,EAAE9C,WAE5F,OACI,sBAAKT,UAAU,uBAAf,UACKwC,GAAS,oBAAIxC,UAAU,4BAAd,SAA2CwC,IACrD,qBAAKxC,UAAU,iFAAf,SACKsD,EAAiBnD,KAAI,SAACoD,GAAD,OAClB,cAAC,EAAD,CAEIlB,gBAAiB,SAACa,GACdb,EAAgBa,GAChBR,EAAgB,KAEpBvD,OAAQoE,GALHA,EAAEhG,SASnB,cAAC,EAAD,CAAa4E,aAAcA,IAC3B,cAAC,EAAD,CACI9B,gBAAiBkB,EAAmBY,EAAciB,GAClD3C,OAAQ0B,EACRzB,eAAgBgC,Q,wBCtEnBc,EAA6B,SAAC,GAAD,IACtCC,EADsC,EACtCA,oBADsC,OAKtC,uBAAMzD,UAAU,sBAAhB,UACI,sBAAMA,UAAU,gBAAhB,SACKyD,EAAoBhD,OAASG,EAAa6C,EAAoBhD,OAAQ,GAAK,UAEhF,uBAAMT,UAAU,YAAhB,UACI,qBAAKA,UAAU,yBAAf,SACI,+BACKyD,EAAoBpF,UACf4C,EAAW,IAAIyC,KAAKD,EAAoBpF,UAAU6C,OAClD,oBAGd,sBAAKlB,UAAU,qBAAf,UACKyD,EAAoB3F,KADzB,IACgC2F,EAAoBnB,mBCvBnDqB,EAAsB,SAAC,GAAD,IAAG7D,EAAH,EAAGA,QAAS8D,EAAZ,EAAYA,KAAZ,OAC/B,wBACI9D,QAASA,EACTE,UAAU,iHAFd,SAII,cAAC,IAAD,CAAM6D,KAAMD,EAAME,KAAM,EAAGC,MAAM,aAI5BC,EAAe,SAAC,GAAD,IACxBlE,EADwB,EACxBA,QACA8D,EAFwB,EAExBA,KACAK,EAHwB,EAGxBA,SAHwB,OASxB,yBACInE,QAASA,EACTE,UAAU,iFAFd,UAIK4D,GAAQ,cAAC,IAAD,CAAMC,KAAMD,EAAME,KAAM,EAAGC,MAAM,UACzCE,MCJIC,EAAc,SAAC,GAA8D,IAA5DrB,EAA2D,EAA3DA,QAASsB,EAAkD,EAAlDA,aAAcC,EAAoC,EAApCA,YAE3CC,EAAW,SAAC9G,GAAD,OAAgB,kBAAM4G,EAAa5G,KACpD,OACI,qBAAKyC,UAAU,kBAAf,SACK6C,EAAQ1C,KAAI,SAACoD,GAAD,OACT,sBAAoBvD,UAAU,yBAA9B,UACI,cAAC,EAAD,CAA4ByD,oBAAqBF,IAChDA,EAAElF,UACC,cAAC,EAAD,CAAqBuF,KAAMU,IAAaxE,SAR3CvC,EAQ4DgG,EAAElF,UAAUd,GARzD,kBAAM6G,EAAY7G,OAU9B,cAAC,EAAD,CAAqBqG,KAAMW,IAAezE,QAASuE,EAASd,EAAEhG,MAEjEgG,EAAElF,WACC,qCACI,sBAAM2B,UAAU,qEAAhB,SACI,cAAC,IAAD,CAAM6D,KAAMW,IAAWV,KAAM,EAAGC,MAAM,YAE1C,sBAAM/D,UAAU,qEAAhB,SACI,cAAC,IAAD,CAAM6D,KAAMY,IAAsBX,KAAM,EAAGC,MAAM,iBAbvDR,EAAE9C,QALR,IAAClD,Q,yBCFfmH,EAAO,SAACC,GAAD,OAAkC,YAAIA,GAAOD,MAAK,SAACzB,EAAG7C,GAAJ,OAAUA,EAAEc,KAAO+B,EAAE/B,SAEvE0D,EAAe,SAAC,GAA6C,IAA3CD,EAA0C,EAA1CA,MAAOE,EAAmC,EAAnCA,UAClC,EAAkDpC,qBAAlD,mBAAOqC,EAAP,KAA0BC,EAA1B,KACQC,EAAWC,IAAU,CAAEC,OAAQC,SAASC,eAAe,mBAAvDJ,OACFK,EAAWvD,IAEjB,OACI,sBAAK9B,UAAU,OAAf,eAC2BlB,IAAtBgG,GACG,cAACE,EAAD,UACI,qBAAKhF,UAAU,6CAAf,SACI,cAAC,EAAD,CACIqC,gBAAiB,SAACa,GACdmC,EAAS9G,EAAa,CAAE2E,WAAU3F,GAAIuH,KACtCC,OAAqBjG,IAEzB0D,MAAM,8BAKtB,qBAAKxC,UAAU,qBAAf,SACI,wBACIF,QAAS+E,EACT7E,UAAU,iHAFd,SAII,cAACsF,EAAA,KAAD,CAAMvB,MAAM,QAAQD,KAAM,EAAGD,KAAM0B,UAG1Cb,EAAKC,GAAOxE,KAAI,SAACqF,GAAD,iBACb,sBAAgBxF,UAAU,yBAA1B,UACI,cAAC,EAAD,CACIyD,oBAAqB,CACjBpF,UAAWmH,EACX/E,OAAM,UAAE+E,EAAErG,cAAJ,aAAE,EAAUsB,OAClB3C,KAAI,UAAE0H,EAAErG,cAAJ,aAAE,EAAUrB,KAChBwE,SAAQ,UAAEkD,EAAErG,cAAJ,aAAE,EAAUmD,aAG1BkD,EAAErG,QACA,cAAC,EAAD,CAAqBW,QAAS,kBAAMiF,EAAqBS,EAAEjI,KAAKqG,KAAM6B,MAE1E,sBAAMzF,UAAU,OAAhB,SACI,cAAC,EAAD,CACI4D,KAAM8B,IACN5F,QAAS,WACLuF,EAAS5G,EAAM,CAAElB,GAAIiI,EAAEjI,aAhB7BiI,EAAEjI,WC3CfoI,EAL+BC,EAAQ,GAK9BC,CAFiC,kCAEtB,CAAEC,WAAY,CAAC,eAK1CC,EAAyB,GAQzBC,EAA0B,SAACnE,GAAD,OAAwBkE,EAAuBE,SAAQ,SAACrD,GAAD,OAAOA,EAAEf,OAEhG8D,EAAOO,GAAG,WAAW,WACjBF,EAAwB,gBAG5BL,EAAOO,GAAG,cAAc,SAACC,GACrBH,EAAwB,mBAG5BL,EAAOO,GAAG,kBAAkB,WACxBF,EAAwB,mBAG5BL,EAAOE,GAAGK,GAAG,SAAS,WAClBF,EAAwB,YAG5BL,EAAOE,GAAGK,GAAG,aAAa,SAACE,GACvBJ,EAAwB,gBAG5BL,EAAOE,GAAGK,GAAG,mBAAmB,SAACG,GAC7BL,EAAwB,mBAG5BL,EAAOE,GAAGK,GAAG,qBAAqB,SAACE,GAC/BJ,EAAwB,mBAG5BL,EAAOE,GAAGK,GAAG,oBAAoB,WAC7BF,EAAwB,mBChD5B,IAAMM,GAAkB,SAACC,GACrB,OAAQA,GACJ,IAAK,QACD,OAAOC,IACX,IAAK,aACD,OAAOC,IACX,IAAK,MACD,OAAOC,IACX,QACI,MAAM,IAAIC,MAAM,kCAIfC,GAAiB,SAAC,GAAD,IAAGL,EAAH,EAAGA,KAAH,OAAwC,cAACjB,EAAA,KAAD,CAAMxB,KAAM,EAAGD,KAAMyC,GAAgBC,MCT9FM,GAAqB,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,iBAAhB,OAC9B,qBAAK/G,UAAU,8EAAf,SACK8G,EAAY3G,KAAI,SAAC6G,GAAD,OACb,uBAAMlH,QAAS,kBAAMiH,EAAiBC,EAAGzJ,KAAKyC,UAAU,yBAAxD,UACI,cAAC,GAAD,CAAgBuG,KAAMS,EAAGT,OACzB,sBAAMvG,UAAU,eAAhB,SAAgCgH,EAAGlJ,SAF+CkJ,EAAGzJ,UCR/F0J,GAAO,SAAC,GAAD,IAAG/F,EAAH,EAAGA,KAAH,OAA8B,qBAAKlB,UAAU,eAAf,SAA+BiB,EAAWC,MAExEgG,GAAQ,WACjB,MAAwBzE,mBAAe,IAAIiB,MAA3C,mBAAOxC,EAAP,KAAaiG,EAAb,KAMA,OAJAC,qBAAU,WACNC,aAAY,kBAAMF,EAAQ,IAAIzD,QAAS,MACxC,IAEI,cAAC,GAAD,CAAMxC,KAAMA,KCIjBoG,GAA6B,SAACpJ,GAChC,OAAQA,GACJ,IAAK,YACD,OAAOqJ,IACX,IAAK,eACD,OAAOC,IACX,IAAK,QACD,OAAOC,IACX,IAAK,eACD,OAAOC,IACX,QACI,MAAM,IAAIf,MAAM,kCAItBgB,GAA6B,SAACzJ,GAChC,OAAQA,GACJ,IAAK,YACD,MAAO,UACX,IAAK,eACL,IAAK,QACD,MAAO,WACX,IAAK,eACD,MAAO,aACX,QACI,MAAM,IAAIyI,MAAM,kCAKfiB,GAAS,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,eACrB,EAA8CpF,mBAA0B,gBAAxE,mBAAOqF,EAAP,KAAwBC,EAAxB,KACA,EAA4DtF,oBAAkB,GAA9E,mBAAOuF,EAAP,KAA+BC,EAA/B,KACQjD,EAAWC,IAAU,CAAEC,OAAQC,SAASC,eAAe,gBAAvDJ,OACFkD,EAAiBlG,GAAiB,SAACY,GAAD,OAAOA,EAAEkE,eAOjD,OALAM,qBAAU,WACN,IJvCiCe,EIuC3BC,GJvC2BD,EIuCWJ,EJtChDhC,EAAuBsC,KAAKF,GACrB,WACHpC,EAAuBuC,OAAOvC,EAAuBwC,QAAQJ,GAAU,KIqCvE,OAAO,kBAAMC,OACd,IAGC,cAACzJ,EAAyB6J,SAA1B,UACK,gBAAG3J,EAAH,EAAGA,aAAcE,EAAjB,EAAiBA,gBAAjB,OACG,sBAAKiB,UAAU,+HAAf,UACKgI,GACG,cAAChD,EAAD,UACI,cAAC,GAAD,CACI8B,YAAaoB,EACbO,mBAAoBP,EAAelF,MAAK,SAACgE,GAAD,OAAQA,EAAGzJ,KAAOsB,KAC1DkI,iBAAkB,SAAClI,GACfoJ,GAA0B,GAC1BlJ,EAAgBF,QAKhC,uBAAMmB,UAAU,OAAOF,QAAS,kBAAMmI,GAA0B,IAAhE,eACsBnJ,IAAjBD,GACG,cAAC,GAAD,CAAgB0H,KAAM2B,EAAelF,MAAK,SAACgE,GAAD,OAAQA,EAAGzJ,KAAOsB,KAAe0H,OAE/E,sCAAOsB,QAAP,IAAOA,IAAkB,cAE7B,cAAC,GAAD,IACA,uBAAM7H,UAAU,4BAAhB,UACI,sBAAMA,UAAU,OAAhB,SAAwB2H,GAA2BG,KACnD,cAACxC,EAAA,KAAD,CAAMzB,KAAMyD,GAA2BQ,GAAkBhE,KAAM,cC1EjF4E,GAA4B,SAAC,GAAsE,IAApEC,EAAmE,EAAnEA,KAAMC,EAA6D,EAA7DA,KAAMhF,EAAuD,EAAvDA,KACvCiF,EAAUD,IADoF,EAAjDE,WACb,cAAgB,aACtD,OACI,eAAC,IAAD,CACIC,GAAE,UAAKC,SAAL,YAA+BJ,GACjC5I,UAAS,UAAK6I,EAAL,iEAFb,UAII,cAACvD,EAAA,KAAD,CAAMvB,MAAM,QAAQD,KAAM,EAAGD,KAAMD,IACnC,mBAAG5D,UAAU,mCAAb,SAAiD2I,QAKhDM,GAAsB,WAK/B,OACI,sBAAKjJ,UAAU,iCAAf,UACI,cAAC,GAAD,CAA2B4I,KAAK,OAAOD,KAAK,UAAU/E,KAAMsF,IAA0BJ,WAJjF,KAKL,cAAC,GAAD,CAA2BF,KAAK,MAAMD,KAAK,MAAM/E,KAAMuF,IAAYL,WAL9D,KAML,cAAC,GAAD,CAA2BF,KAAK,QAAQD,KAAK,QAAQ/E,KAAMwF,IAAcN,WANpE,SC8EFO,OA5Ff,WAAgB,IAAD,EACL1G,EAAaX,GAAiB,SAACY,GAAD,OAAOA,EAAEC,WACvCC,EAAgBd,GAAiB,SAACY,GAAD,OAAOA,EAAExE,cAChD,EAAoDqE,qBAApD,mBAAOgG,EAAP,KAA2Ba,EAA3B,KACMpB,EAAiBlG,GAAiB,SAACY,GAAD,OAAOA,EAAEkE,eAE3CzB,EAAWvD,IAEXyH,EAAwB,SAAC1K,GAAD,OAC1B8D,EAAWxC,KAAI,SAACyC,GAAD,mBAAC,eACTA,GADQ,IAEXvE,UAAWyE,EAAcE,MAAK,SAACC,GAAD,OAAOA,EAAEC,WAAaN,EAAErF,IAAM0F,EAAEpE,eAAiBA,WAGjF2K,EAAwB,SAAC3K,GAAD,OAC1BiE,EACKK,QAAO,SAACtB,GAAD,OAAOA,EAAEhD,eAAiBA,KACjCsB,KAAI,SAAC0B,GAAD,mBAAC,eACCA,GADF,IAED1C,OAAQwD,EAAWK,MAAK,SAACO,GAAD,OAAO1B,EAAEqB,WAAaK,EAAEhG,YAG5D,OACI,cAACoB,EAAyB8K,SAA1B,CACIC,MAAO,CAAE7K,aAAc4J,EAAoB1J,gBAAiBuK,GADhE,SAGI,cAAC,IAAD,UACI,sBAAK/L,GAAG,aAAayC,UAAU,uEAA/B,UACI,cAAC,GAAD,CAAQ6H,eAAc,UAAEK,EAAelF,MAAK,SAACgE,GAAD,OAAQA,EAAGzJ,KAAOkL,YAAxC,aAAE,EAA2D3K,OACnF,qBAAKP,GAAG,gBAAgByC,UAAU,2CAAlC,SACI,qBAAKA,UAAU,kCAAf,SACI,cAACrB,EAAyB6J,SAA1B,UACK,gBAAG3J,EAAH,EAAGA,aAAH,OACG,cAAC,IAAD,eACsBC,IAAjBD,GACG,qCACI,cAAC,IAAD,CAAO8K,OAAK,EAAC9F,KAAI,UAAKmF,SAAL,SAAjB,SACI,cAAC,EAAD,CACI7E,aAAc,SAACjB,GAAD,OACVmC,EACIpH,EAAI,CACAiF,WACArE,eACAqC,MAAM,IAAIwC,MAAOkG,cAI7BxF,YAAa,SAACyF,GAAD,OACTxE,EAAS5G,EAAM,CAAElB,GAAIsM,MAEzBhH,QAAS0G,EAAsB1K,OAGvC,cAAC,IAAD,CAAO8K,OAAK,EAAC9F,KAAI,UAAKmF,SAAL,QAAjB,SACI,cAAC,EAAD,CACI3G,gBAAiB,SAACa,GACdmC,EACIpH,EAAI,CACAiF,WACArE,eACAqC,MAAM,IAAIwC,MAAOkG,cAI7BpH,MAAO,kBACP3D,aAAc4J,MAGtB,cAAC,IAAD,CAAOkB,OAAK,EAAC9F,KAAI,UAAKmF,SAAL,UAAjB,SACI,cAAC,EAAD,CACInE,UAAW,WACPQ,EAASpH,EAAI,CAAEY,eAAcqC,MAAM,IAAIwC,MAAOkG,cAElDjF,MAAO6E,EAAsB3K,mBAUjE,8BACI,cAAC,GAAD,c,oBChFTiL,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFDQ,GAAe1M,YAAY,CACpCC,KAAM,UACNC,aAJ+B,GAK/BC,SAAU,CACNwM,SAAU,SAACtM,EAAOC,GACd,OnB2Da0E,EmB3DK3E,EnB2DcuM,EmB3DPtM,EAAOG,QnB4DxCnB,YAAK0F,EAAS3F,IAAA,2BAAgBuN,GAAhB,IAA2BlN,GAAIP,EAAU6F,OADnC,IAACA,EAAmB4H,GmBzDpCC,WAAY,SAACxM,EAAOC,GAChB,OnB2De0E,EmB3DK3E,EnB2DcyM,EmB3DPxM,EAAOG,QnB4D1CnB,YACI0F,EACA3F,IACIC,YACI0F,EACA3F,KAAc,SAACI,GAAD,OAAOA,EAAEC,KAAOoN,EAAepN,MAC7CC,KACI,kBAAO,KACP,SAACF,GAAD,OAAOA,MAGfqN,GAEJnN,KACI,kBAAMqF,KACN,SAACvF,GAAD,OAAOA,MAhBO,IAACuF,EAAmB8H,MmBtDvC,GAAiCJ,GAAa7L,QAEtC6L,IAFR,GAAQC,SAAR,GAAkBE,WAEVH,GAAf,SCfaK,GAAsB/M,YAAY,CAC3CC,KAAM,iBACNC,aAJsC,GAKtCC,SAAU,CACNC,IAAK,SAACC,EAAOC,GACT,OpBoHR0M,EoBpHiC3M,EpBqHjC4M,EoBrHwC3M,EAAOG,QpBsH9BnB,YAAK0N,EAAgB3N,IAAA,2BAAgB4N,GAAhB,IAA8BvN,GAAIP,EAAU6N,OAHvD,IAC3BA,EACAC,GoBnHIC,OAAQ,SAAC7M,EAAOC,GACZ,OpBqHuB0M,EoBrHK3M,EpBqH2BX,EoBrHpBY,EAAOG,QAAQf,GpBsH1DG,EAAWmN,EAAgBtN,GADG,IAACsN,EAAgCtN,MoBhH5D,GAAwBqN,GAAoBlM,QAEpCkM,IAFR,GAAQ3M,IAAR,GAAa8M,OAELH,GAAf,SCfaI,GAAmBnN,YAAY,CACxCC,KAAM,cACNC,aAJmC,GAKnCC,SAAU,CACNC,IAAK,SAACC,EAAOC,GACT,OrBkFkB2I,EqBlFK5I,ErBkFsB+M,EqBlFf9M,EAAOG,QrBmF7CnB,YAAK2J,EAAa5J,IAAA,2BAAgB+N,GAAhB,IAA+B1N,GAAIP,EAAU8J,OADtC,IAACA,EAA2BmE,GqBhFjDF,OAAQ,SAAC7M,EAAOC,GACZ,OrBkFqB2I,EqBlFK5I,ErBkFsBX,EqBlFfY,EAAOG,QAAQf,GrBkF6BG,EAAWoJ,EAAavJ,GAAjF,IAACuJ,EAA2BvJ,MqB7ErD,GAAwByN,GAAiBtM,QAEjCsM,IAFR,GAAQ/M,IAAR,GAAa8M,OAELC,GAAf,S,SCXME,GAAUC,aAAgB,CAAEtI,WAASiE,eAAa1I,aAAYyM,oBAE9DO,GAAwB,SAAClN,EAAmBC,GAC9C,MAAoB,kBAAhBA,EAAOoI,KACApI,EAAOD,MAEXgN,GAAQhN,EAAOC,IAUZkN,YAAe,CACzBH,a,MClBJvF,EAAOO,GAAG,kBAAkB,SAAC/H,GAAD,OAAYmN,GAAMjG,SAAN,2BAAoBlH,GAApB,IAA4BoN,UAAU,QAC9E5F,EAAOO,GAAG,iBAAiB,SAAChI,GAAD,OAAWoN,GAAMjG,SAAS,CAAEkB,KAAM,gBAAiBrI,QAAOqN,UAAU,OACxF,IDQqBC,GCRfC,GAAmE,SAACC,GAAD,OAAc,SAACC,GAAD,OAAU,SAACxN,IAChGA,EAAOoN,UAAY5F,EAAOiG,WAAWjG,EAAOkG,KAAK,cAAe1N,GAErEwN,EAAKxN,MAGHmN,IDEsBE,GCFF,CAACC,IDGvBJ,YAAe,CACXH,QAASE,GACTU,WAAY,SAACC,GAAD,OAA0BA,IAAuB3M,OAAOoM,QCH5EQ,KAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAUZ,MAAOA,GAAjB,SACI,cAAC,GAAD,QAGRnG,SAASC,eAAe,SAM5B0E,O","file":"static/js/main.ac5e9018.chunk.js","sourcesContent":["import * as Arr from \"fp-ts/Array\";\nimport * as N from \"fp-ts/number\";\nimport * as Option from \"fp-ts/Option\";\nimport * as Ord from \"fp-ts/Ord\";\nimport { flow, increment, pipe } from \"fp-ts/function\";\n\nexport type Gender = \"male\" | \"female\";\n\nexport type Player = {\n    id: number;\n    name: string;\n    lastName: string;\n    number: number;\n    birthYear: number;\n    gender: Gender;\n};\n\nexport type RaceCategory = {\n    id: number;\n    name: string;\n    minAge?: number;\n    maxAge?: number;\n    gender?: Gender;\n};\n\nexport type TimeKeeperType = \"start\" | \"checkpoint\" | \"end\";\n\nexport type TimeKeeper = {\n    id: number;\n    name: string;\n    type: TimeKeeperType;\n};\n\nexport type TimeStamp = {\n    id: number;\n    playerId?: number;\n    timeKeeperId: number;\n    time: number;\n};\n\nexport type State = {\n    players: Player[];\n    timeKeepers: TimeKeeper[];\n    timeStamps: TimeStamp[];\n};\n\nexport type RaceResult = {\n    player: Omit<Player, \"id\">;\n    timeStamps: { [timeKeeperId: number]: number };\n};\n\nexport type RaceResults = RaceResult[];\n\nexport const getNextId = flow(\n    Arr.sortBy([\n        pipe(\n            N.Ord,\n            Ord.contramap((e: { id: number }) => e.id)\n        )\n    ]),\n    Arr.last,\n    Option.map((e) => e.id),\n    Option.fold(() => 0, increment)\n);\n\nexport const removeById = <T extends { id: number }>(items: T[], id: number) =>\n    pipe(\n        items,\n        Arr.filter((e) => e.id !== id)\n    );\n\nexport const register = (players: Player[], newPlayer: Omit<Player, \"id\">): Player[] =>\n    pipe(players, Arr.append({ ...newPlayer, id: getNextId(players) }));\n\nexport const changeInfo = (players: Player[], modifiedPlayer: Player): Player[] =>\n    pipe(\n        players,\n        Arr.updateAt(\n            pipe(\n                players,\n                Arr.findIndex((e) => e.id === modifiedPlayer.id),\n                Option.fold(\n                    () => -1,\n                    (e) => e\n                )\n            ),\n            modifiedPlayer\n        ),\n        Option.fold(\n            () => players,\n            (e) => e\n        )\n    );\n\nexport const addTimeKeeper = (timeKeepers: TimeKeeper[], newTimeKeeper: Omit<TimeKeeper, \"id\">): TimeKeeper[] =>\n    pipe(timeKeepers, Arr.append({ ...newTimeKeeper, id: getNextId(timeKeepers) }));\n\nexport const removeTimeKeeper = (timeKeepers: TimeKeeper[], id: number): TimeKeeper[] => removeById(timeKeepers, id);\n\nexport const addTimeStamp = (timeStamps: TimeStamp[], timeStamp: Omit<TimeStamp, \"id\">): TimeStamp[] =>\n    pipe(timeStamps, Arr.append({ ...timeStamp, id: getNextId(timeStamps) }));\n\nexport const resetTimeStamp = (timeStamps: TimeStamp[], id: number): TimeStamp[] => removeById(timeStamps, id);\n\nexport const assignPlayer = (\n    timeStamps: TimeStamp[],\n    modifiedTimeStamp: Pick<TimeStamp, \"id\" | \"playerId\">\n): TimeStamp[] =>\n    pipe(\n        timeStamps,\n        Arr.modifyAt(\n            pipe(\n                timeStamps,\n                Arr.findIndex((e) => e.id === modifiedTimeStamp.id),\n                Option.fold(\n                    () => -1,\n                    (e) => e\n                )\n            ),\n            (e) => ({ ...e, ...modifiedTimeStamp })\n        ),\n        Option.fold(\n            () => timeStamps,\n            (e) => e\n        )\n    );\n\nexport const addRaceCategory = (\n    raceCategories: RaceCategory[],\n    raceCategory: Omit<RaceCategory, \"id\">\n): RaceCategory[] => pipe(raceCategories, Arr.append({ ...raceCategory, id: getNextId(raceCategories) }));\n\nexport const removeRaceCategory = (raceCategories: RaceCategory[], id: number): RaceCategory[] =>\n    removeById(raceCategories, id);\n","import * as m from \"../model\";\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nexport type TimeStampsState = m.TimeStamp[];\n\nconst initialState: TimeStampsState = [];\n\nexport const timeStampsSlice = createSlice({\n    name: \"timeStamps\",\n    initialState,\n    reducers: {\n        add: (state, action: PayloadAction<Omit<m.TimeStamp, \"id\">>) => {\n            return m.addTimeStamp(state, action.payload);\n        },\n        assignPlayer: (state, action: PayloadAction<Pick<m.TimeStamp, \"id\" | \"playerId\">>) => {\n            return m.assignPlayer(state, action.payload);\n        },\n        reset: (state, action: PayloadAction<Pick<m.TimeStamp, \"id\">>) => {\n            return m.resetTimeStamp(state, action.payload.id);\n        }\n    }\n});\n\nexport const { add, reset, assignPlayer } = timeStampsSlice.actions;\n\nexport default timeStampsSlice.reducer;\n","import { createContext } from \"react\";\n\nexport const CurrentTimeKeeperContext = createContext<{\n    timeKeeperId?: number;\n    setTimeKeeperId: (timeKeeperId: number) => void;\n}>({\n    timeKeeperId: undefined,\n    setTimeKeeperId: () => {}\n});\n","import React from \"react\";\n\ntype Button = {\n    char: string;\n    changeNumber: (number: string) => string;\n    alwaysEnabled?: boolean;\n};\n\nconst padActions = {\n    addDigit: (digit: string) => (player: string) => player.concat(digit),\n    back: (player: string) => player.slice(0, -1),\n    reset: (player: string) => \"\"\n};\n\nconst buttons: Button[] = [\n    { char: \"1\", changeNumber: padActions.addDigit(\"1\") },\n    { char: \"2\", changeNumber: padActions.addDigit(\"2\") },\n    { char: \"3\", changeNumber: padActions.addDigit(\"3\") },\n    { char: \"4\", changeNumber: padActions.addDigit(\"4\") },\n    { char: \"5\", changeNumber: padActions.addDigit(\"5\") },\n    { char: \"6\", changeNumber: padActions.addDigit(\"6\") },\n    { char: \"7\", changeNumber: padActions.addDigit(\"7\") },\n    { char: \"8\", changeNumber: padActions.addDigit(\"8\") },\n    { char: \"9\", changeNumber: padActions.addDigit(\"9\") },\n    { char: \"↺\", changeNumber: padActions.reset, alwaysEnabled: true },\n    { char: \"0\", changeNumber: padActions.addDigit(\"0\") },\n    { char: \"←\", changeNumber: padActions.back, alwaysEnabled: true }\n];\n\ntype PadButtonProps = {\n    padClick: () => void;\n    char: string;\n    enabled: boolean;\n    alwaysEnabled?: boolean;\n};\nconst PadButton = ({ char, padClick, enabled, alwaysEnabled }: PadButtonProps) => (\n    <button\n        onClick={padClick}\n        disabled={!alwaysEnabled && !enabled}\n        className=\"disabled:opacity-20 text-2xl transition-opacity rounded-md text-white m-1.5 \"\n    >\n        {char}\n    </button>\n);\n\ntype DialPadProps = {\n    onNumberChange: (number: string) => void;\n    availableDigits: string[];\n    number: string;\n};\nexport const DialPad = (props: DialPadProps) => {\n    const onPadButtonClick = (button: Button) => {\n        const newNumber = button.changeNumber(props.number);\n        props.onNumberChange(newNumber);\n    };\n\n    return (\n        <div className=\"grid h-2/5 self-center w-5/6 grid-cols-3 py-2 grid-rows-4\">\n            {buttons.map((b) => (\n                <PadButton\n                    alwaysEnabled={b.alwaysEnabled}\n                    enabled={props.availableDigits.includes(b.char)}\n                    padClick={() => onPadButtonClick(b)}\n                    char={b.char}\n                    key={b.char}\n                />\n            ))}\n        </div>\n    );\n};\n","import * as Arr from \"fp-ts/Array\";\nimport * as S from \"fp-ts/string\";\nimport { flow, pipe } from \"fp-ts/function\";\n\nexport const formatNumber = (n: number, precision = 2) =>\n    n.toLocaleString(\"en-US\", { minimumIntegerDigits: precision });\n\nexport const formatTime = (time: Date) =>\n    `${formatNumber(time.getHours())}:${formatNumber(time.getMinutes())}:${formatNumber(\n        time.getSeconds()\n    )}.${formatNumber(time.getMilliseconds(), 3).slice(0, 1)}`;\n\nexport const getAvailableNumbers = (typedNumbers: string, allNumbers: number[]): number[] =>\n    typedNumbers !== \"\" ? pipe(allNumbers, Arr.filter(flow(String, S.startsWith(typedNumbers)))) : [];\n\nexport const getAvailableDigits = (typedNumbers: string, allNumbers: number[]): string[] =>\n    pipe(\n        allNumbers,\n        Arr.map(String),\n        Arr.filter(S.startsWith(typedNumbers)),\n        Arr.map((e) => S.slice(typedNumbers.length, e.length)(e)),\n        Arr.map(S.slice(0, 1)),\n        Arr.filter((s) => !!s)\n    );\n","import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\nimport type { TimerState, TimerDispatch } from \"@set/timer/store\";\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useTimerDispatch = () => useDispatch<TimerDispatch>();\nexport const useTimerSelector: TypedUseSelectorHook<TimerState> = useSelector;\n","import { DialPad } from \"./dial-pad\";\nimport { getAvailableDigits, getAvailableNumbers } from \"../utils\";\nimport { Player, TimeStamp } from \"@set/timer/model\";\nimport { useState } from \"react\";\nimport { useTimerSelector } from \"../hooks\";\n\ntype PlayerWithTimeStamp = Player & {\n    timeStamp?: TimeStamp;\n};\n\ntype TypedPlayerProps = {\n    playerNumber: string;\n};\n\nexport const TypedPlayer = ({ playerNumber }: TypedPlayerProps) => (\n    <div className=\"text-orange-500 h-16 flex text-center justify-center text-4xl font-regular py-2\">\n        {playerNumber}\n    </div>\n);\n\ntype CheckInPlayerProps = {\n    player: PlayerWithTimeStamp;\n    onPlayerCheckIn: (playerId: number) => void;\n};\nexport const CheckInPlayer = ({ player, onPlayerCheckIn }: CheckInPlayerProps) => (\n    <button\n        onClick={() => onPlayerCheckIn(player.id)}\n        className=\"bg-gradient-to-r from-orange-500 to-red-500 mt-2 flex w-full px-4 py-2 items-center shadow-md rounded-md\"\n    >\n        <div className=\"font-bold text-2xl mr-4\">{player.number}</div>\n        <div>\n            {player.name} {player.lastName}\n        </div>\n    </button>\n);\n\ntype PlayersDialPadProps = {\n    onPlayerCheckIn: (playerId: number) => void;\n    title?: string;\n    timeKeeperId?: number;\n};\n\nexport const PlayersDialPad = ({ onPlayerCheckIn, title, timeKeeperId }: PlayersDialPadProps) => {\n    const [playerNumber, setPlayerNumber] = useState(\"\");\n    const allPlayers = useTimerSelector((x) => x.players);\n    const allTimeStamps = useTimerSelector((x) => x.timeStamps);\n\n    const playersWithTimeStamps = allPlayers.map((x) => ({\n        ...x,\n        timeStamp: allTimeStamps.find((a) => a.playerId === x.id && a.timeKeeperId === timeKeeperId)\n    }));\n\n    const playersWithoutTimeStamps = playersWithTimeStamps.filter((x) => x.timeStamp === undefined);\n    const playersNumbersWithoutTimeStamps = playersWithoutTimeStamps.map((x) => x.number);\n\n    const availableNumbers = getAvailableNumbers(playerNumber, playersNumbersWithoutTimeStamps);\n    const availablePlayers = playersWithoutTimeStamps.filter((p) => availableNumbers.includes(p.number));\n\n    return (\n        <div className=\"flex h-full flex-col\">\n            {title && <h1 className=\"text-2xl text-center py-4\">{title}</h1>}\n            <div className=\"flex-auto flex flex-col-reverse mx-12 overflow-y-auto mt-2 items-stretch h-3/5\">\n                {availablePlayers.map((p) => (\n                    <CheckInPlayer\n                        key={p.id}\n                        onPlayerCheckIn={(playerId) => {\n                            onPlayerCheckIn(playerId);\n                            setPlayerNumber(\"\");\n                        }}\n                        player={p}\n                    />\n                ))}\n            </div>\n            <TypedPlayer playerNumber={playerNumber} />\n            <DialPad\n                availableDigits={getAvailableDigits(playerNumber, playersNumbersWithoutTimeStamps)}\n                number={playerNumber}\n                onNumberChange={setPlayerNumber}\n            />\n        </div>\n    );\n};\n","import { formatNumber, formatTime } from \"../utils\";\nimport { Player, TimeStamp } from \"@set/timer/model\";\n\ntype PlayerWithTimeStamp = Player & {\n    timeStamp?: TimeStamp;\n};\n\nexport const PlayerWithTimeStampDisplay = ({\n    playerWithTimeStamp\n}: {\n    playerWithTimeStamp: Partial<PlayerWithTimeStamp>;\n}) => (\n    <span className=\"flex flex-grow h-12\">\n        <span className=\"text-3xl mr-4\">\n            {playerWithTimeStamp.number ? formatNumber(playerWithTimeStamp.number, 3) : \"- - -\"}\n        </span>\n        <span className=\"flex-grow\">\n            <div className=\"text-lg font-semibold \">\n                <span>\n                    {playerWithTimeStamp.timeStamp\n                        ? formatTime(new Date(playerWithTimeStamp.timeStamp.time))\n                        : \"- - - - - - -\"}\n                </span>\n            </div>\n            <div className=\"opacity-50 text-sm\">\n                {playerWithTimeStamp.name} {playerWithTimeStamp.lastName}\n            </div>\n        </span>\n    </span>\n);\n","import Icon from \"@mdi/react\";\n\nexport const PrimaryActionButton = ({ onClick, icon }: { onClick: () => void; icon: string }) => (\n    <button\n        onClick={onClick}\n        className=\"w-10 bg-gradient-to-r from-orange-500 to-red-500 flex items-center rounded-md px-2 py-1 self-center text-white\"\n    >\n        <Icon path={icon} size={1} color=\"white\" />\n    </button>\n);\n\nexport const ActionButton = ({\n    onClick,\n    icon,\n    contents\n}: {\n    onClick: () => void;\n    icon?: string;\n    contents?: JSX.Element;\n}) => (\n    <button\n        onClick={onClick}\n        className=\"w-10 bg-gray-600 flex items-center rounded-md px-2 py-1 self-center text-white\"\n    >\n        {icon && <Icon path={icon} size={1} color=\"white\" />}\n        {contents}\n    </button>\n);\n","import Icon from \"@mdi/react\";\nimport {\n    mdiAccountSupervisor,\n    mdiAlarmCheck,\n    mdiAlarmOff,\n    mdiWrench\n    } from \"@mdi/js\";\nimport { Player, TimeStamp } from \"@set/timer/model\";\nimport { PlayerWithTimeStampDisplay } from \"./player-with-timestamp-display\";\nimport { PrimaryActionButton } from \"./action-button\";\n\ntype PlayerWithTimeStamp = Player & {\n    timeStamp?: TimeStamp;\n};\n\ntype PlayersListProps = {\n    players: PlayerWithTimeStamp[];\n    onTimeRecord: (playerId: number) => void;\n    onTimeReset: (timeStampId: number) => void;\n};\n\nexport const PlayersList = ({ players, onTimeRecord, onTimeReset }: PlayersListProps) => {\n    const onReset = (id: number) => () => onTimeReset(id);\n    const onRecord = (id: number) => () => onTimeRecord(id);\n    return (\n        <div className=\"px-4 text-white\">\n            {players.map((p) => (\n                <div key={p.number} className=\"py-5 flex items-center\">\n                    <PlayerWithTimeStampDisplay playerWithTimeStamp={p} />\n                    {p.timeStamp ? (\n                        <PrimaryActionButton icon={mdiAlarmOff} onClick={onReset(p.timeStamp.id)} />\n                    ) : (\n                        <PrimaryActionButton icon={mdiAlarmCheck} onClick={onRecord(p.id)} />\n                    )}\n                    {p.timeStamp && (\n                        <>\n                            <span className=\"ml-1 bg-gray-600 flex items-center rounded-md px-2 py-1 text-white\">\n                                <Icon path={mdiWrench} size={1} color=\"white\" />\n                            </span>\n                            <span className=\"ml-1 bg-gray-600 flex items-center rounded-md px-2 py-1 text-white\">\n                                <Icon path={mdiAccountSupervisor} size={1} color=\"white\" />\n                            </span>\n                        </>\n                    )}\n                </div>\n            ))}\n        </div>\n    );\n};\n","import usePortal from \"react-useportal\";\nimport { ActionButton, PrimaryActionButton } from \"./action-button\";\nimport { assignPlayer, reset } from \"@set/timer/slices/time-stamps\";\nimport { Icon } from \"@mdi/react\";\nimport { mdiAccountAlertOutline, mdiDeleteOutline, mdiPlusCircleOutline } from \"@mdi/js\";\nimport { Player, TimeStamp } from \"@set/timer/model\";\nimport { PlayersDialPad } from \"./players-dial-pad\";\nimport { PlayerWithTimeStampDisplay } from \"./player-with-timestamp-display\";\nimport { useState } from \"react\";\nimport { useTimerDispatch } from \"../hooks\";\n\ntype TimeStampWithPlayer = TimeStamp & {\n    player?: Player;\n};\n\ntype PlayersTimesProps = {\n    times: TimeStampWithPlayer[];\n    onAddTime: () => void;\n};\n\nconst sort = (times: TimeStampWithPlayer[]) => [...times].sort((a, b) => b.time - a.time);\n\nexport const PlayersTimes = ({ times, onAddTime }: PlayersTimesProps) => {\n    const [timeStampToAssign, setTimeStampToAssign] = useState<number>();\n    const { Portal } = usePortal({ bindTo: document.getElementById(\"module-holder\") as HTMLElement });\n    const dispatch = useTimerDispatch();\n\n    return (\n        <div className=\"px-4\">\n            {timeStampToAssign !== undefined && (\n                <Portal>\n                    <div className=\"absolute inset-0 h-full w-full bg-gray-800\">\n                        <PlayersDialPad\n                            onPlayerCheckIn={(playerId) => {\n                                dispatch(assignPlayer({ playerId, id: timeStampToAssign }));\n                                setTimeStampToAssign(undefined);\n                            }}\n                            title=\"Assign time to player\"\n                        />\n                    </div>\n                </Portal>\n            )}\n            <div className=\"flex flex-col mt-2\">\n                <button\n                    onClick={onAddTime}\n                    className=\"self-end rounded-md text-center bg-gradient-to-r w-20 flex justify-center from-orange-500 to-red-500 py-2 px-4\"\n                >\n                    <Icon color=\"white\" size={1} path={mdiPlusCircleOutline} />\n                </button>\n            </div>\n            {sort(times).map((t) => (\n                <div key={t.id} className=\"flex py-5 items-center\">\n                    <PlayerWithTimeStampDisplay\n                        playerWithTimeStamp={{\n                            timeStamp: t,\n                            number: t.player?.number,\n                            name: t.player?.name,\n                            lastName: t.player?.lastName\n                        }}\n                    />\n                    {!t.player && (\n                        <PrimaryActionButton onClick={() => setTimeStampToAssign(t.id)} icon={mdiAccountAlertOutline} />\n                    )}\n                    <span className=\"ml-1\">\n                        <ActionButton\n                            icon={mdiDeleteOutline}\n                            onClick={() => {\n                                dispatch(reset({ id: t.id }));\n                            }}\n                        />\n                    </span>\n                </div>\n            ))}\n        </div>\n    );\n};\n","import { io as ioClient } from \"socket.io-client\";\n\nconst io = (\n    process.env.NODE_ENV === \"production\" ? require(\"socket.io-client/dist/socket.io\") : require(\"socket.io-client\")\n) as typeof ioClient;\n\nconst hubUrl = process.env.NODE_ENV === \"production\" ? \"wss://wss.set-hub.pyszstudio.pl\" : \"ws://localhost:21822\";\n\nexport const socket = io(hubUrl, { transports: [\"websocket\"] });\n\nexport type ConnectionState = \"connected\" | \"reconnecting\" | \"disconnected\" | \"error\";\n\ntype ConnectionStateHandler = (s: ConnectionState) => void;\nconst onStateChangedHandlers = [] as ConnectionStateHandler[];\nexport const onConnectionStateChanged = (handler: ConnectionStateHandler) => {\n    onStateChangedHandlers.push(handler);\n    return () => {\n        onStateChangedHandlers.splice(onStateChangedHandlers.indexOf(handler), 1);\n    };\n}; //possible memory leaks\n\nconst runStateChangedHandlers = (s: ConnectionState) => onStateChangedHandlers.forEach((x) => x(s));\n\nsocket.on(\"connect\", () => {\n    runStateChangedHandlers(\"connected\");\n});\n\nsocket.on(\"disconnect\", (r) => {\n    runStateChangedHandlers(\"disconnected\");\n});\n\nsocket.on(\"connect_failed\", () => {\n    runStateChangedHandlers(\"disconnected\");\n});\n\nsocket.io.on(\"error\", () => {\n    runStateChangedHandlers(\"error\");\n});\n\nsocket.io.on(\"reconnect\", (attempt) => {\n    runStateChangedHandlers(\"connected\");\n});\n\nsocket.io.on(\"reconnect_error\", (error) => {\n    runStateChangedHandlers(\"reconnecting\");\n});\n\nsocket.io.on(\"reconnect_attempt\", (attempt) => {\n    runStateChangedHandlers(\"reconnecting\");\n});\n\nsocket.io.on(\"reconnect_failed\", () => {\n    runStateChangedHandlers(\"disconnected\");\n});\n","import { Icon } from \"@mdi/react\";\nimport { mdiFlagCheckered, mdiRayStartArrow, mdiRayVertex } from \"@mdi/js\";\nimport { TimeKeeperType } from \"../../../timer/model\";\n\nconst getIconFromType = (type: TimeKeeperType) => {\n    switch (type) {\n        case \"start\":\n            return mdiRayStartArrow;\n        case \"checkpoint\":\n            return mdiRayVertex;\n        case \"end\":\n            return mdiFlagCheckered;\n        default:\n            throw new Error(\"Not handled time keeper type\");\n    }\n};\n\nexport const TimeKeeperIcon = ({ type }: { type: TimeKeeperType }) => <Icon size={1} path={getIconFromType(type)} />;\n","import { TimeKeeper } from \"@set/timer/model\";\nimport { TimeKeeperIcon } from \"./time-keeper-icon\";\ntype TimeKeeperSelectorProps = {\n    timeKeepers: TimeKeeper[];\n    selectedTimeKeeper?: TimeKeeper;\n    timeKeeperChosen: (timeKeeperId: number) => void;\n};\n\nexport const TimeKeeperSelector = ({ timeKeepers, timeKeeperChosen }: TimeKeeperSelectorProps) => (\n    <div className=\"flex h-full w-full justify-center bg-gray-800 pl-20 flex-col absolute top-0\">\n        {timeKeepers.map((tk) => (\n            <span onClick={() => timeKeeperChosen(tk.id)} className=\"flex items-center py-4\" key={tk.id}>\n                <TimeKeeperIcon type={tk.type} />\n                <span className=\"ml-4 text-xl\">{tk.name}</span>\n            </span>\n        ))}\n    </div>\n);\n","import { formatTime } from \"../utils\";\nimport { useEffect, useState } from \"react\";\n\nconst Time = ({ time }: { time: Date }) => <div className=\"w-24 text-xl\">{formatTime(time)}</div>;\n\nexport const Timer = () => {\n    const [time, setTime] = useState<Date>(new Date());\n\n    useEffect(() => {\n        setInterval(() => setTime(new Date()), 10);\n    }, []);\n\n    return <Time time={time} />;\n};\n","import usePortal from \"react-useportal\";\nimport { ConnectionState, onConnectionStateChanged } from \"../connection\";\nimport { CurrentTimeKeeperContext } from \"../contexts/current-time-keeper\";\nimport { Icon } from \"@mdi/react\";\nimport {\n    mdiCloudOffOutline,\n    mdiCloudOutline,\n    mdiCloudSyncOutline,\n    mdiWeatherCloudyAlert\n    } from \"@mdi/js\";\nimport { TimeKeeperIcon } from \"./time-keeper-icon\";\nimport { TimeKeeperSelector } from \"./time-keeper-selector\";\nimport { Timer } from \"./timer\";\nimport { useEffect, useState } from \"react\";\nimport { useTimerSelector } from \"../hooks\";\n\nconst getIconFromConnectionState = (state: ConnectionState) => {\n    switch (state) {\n        case \"connected\":\n            return mdiCloudOutline;\n        case \"disconnected\":\n            return mdiCloudOffOutline;\n        case \"error\":\n            return mdiWeatherCloudyAlert;\n        case \"reconnecting\":\n            return mdiCloudSyncOutline;\n        default:\n            throw new Error(\"not handled connection state\");\n    }\n};\n\nconst getTextFromConnectionState = (state: ConnectionState) => {\n    switch (state) {\n        case \"connected\":\n            return \"ON-LINE\";\n        case \"disconnected\":\n        case \"error\":\n            return \"OFF-LINE\";\n        case \"reconnecting\":\n            return \"CONNECTING\";\n        default:\n            throw new Error(\"not handled connection state\");\n    }\n};\n\ntype StatusProps = { timeKeeperName?: string };\nexport const Status = ({ timeKeeperName }: StatusProps) => {\n    const [connectionState, setConnectionState] = useState<ConnectionState>(\"disconnected\");\n    const [showTimeKeeperSelector, setShowTimeKeeperSelector] = useState<boolean>(false);\n    const { Portal } = usePortal({ bindTo: document.getElementById(\"app-holder\") as HTMLElement });\n    const allTimeKeepers = useTimerSelector((x) => x.timeKeepers);\n\n    useEffect(() => {\n        const unregister = onConnectionStateChanged(setConnectionState);\n        return () => unregister();\n    }, []);\n\n    return (\n        <CurrentTimeKeeperContext.Consumer>\n            {({ timeKeeperId, setTimeKeeperId }) => (\n                <div className=\"px-5 w-screen flex-shrink-0 flex items-center justify-between bg-gradient-to-r from-orange-500 to-red-500 font-semibold h-10\">\n                    {showTimeKeeperSelector && (\n                        <Portal>\n                            <TimeKeeperSelector\n                                timeKeepers={allTimeKeepers}\n                                selectedTimeKeeper={allTimeKeepers.find((tk) => tk.id === timeKeeperId)}\n                                timeKeeperChosen={(timeKeeperId) => {\n                                    setShowTimeKeeperSelector(false);\n                                    setTimeKeeperId(timeKeeperId);\n                                }}\n                            ></TimeKeeperSelector>\n                        </Portal>\n                    )}\n                    <span className=\"flex\" onClick={() => setShowTimeKeeperSelector(true)}>\n                        {timeKeeperId !== undefined && (\n                            <TimeKeeperIcon type={allTimeKeepers.find((tk) => tk.id === timeKeeperId)!.type} />\n                        )}\n                        <span>{timeKeeperName ?? \"CHOOSE\"}</span>\n                    </span>\n                    <Timer />\n                    <span className=\"text-xs flex items-center\">\n                        <span className=\"mr-2\">{getTextFromConnectionState(connectionState)}</span>\n                        <Icon path={getIconFromConnectionState(connectionState)} size={1} />\n                    </span>\n                </div>\n            )}\n        </CurrentTimeKeeperContext.Consumer>\n    );\n};\n","import { Icon } from \"@mdi/react\";\nimport { Link } from \"react-router-dom\";\nimport { mdiDialpad, mdiFormatListNumberedRtl, mdiTimetable } from \"@mdi/js\";\nimport { StopWatchMode } from \"../stopwatch-mode\";\n// import { Link, useLocation } from \"react-router-dom\";\n\ntype StopWatchModeSwitchButtonProps = { text: string; mode: StopWatchMode; icon: string; chosenMode: StopWatchMode };\n\nconst StopWatchModeSwitchButton = ({ text, mode, icon, chosenMode }: StopWatchModeSwitchButtonProps) => {\n    const opacity = mode === chosenMode ? \"opacity-100\" : \"opacity-20\";\n    return (\n        <Link\n            to={`${process.env.PUBLIC_URL}/${mode}`}\n            className={`${opacity} transition-opacity w-12 flex flex-col items-center px-4 py-2`}\n        >\n            <Icon color=\"white\" size={1} path={icon} />\n            <p className=\"text-xs text-white font-semibold\">{text}</p>\n        </Link>\n    );\n};\n\nexport const StopWatchModeSwitch = () => {\n    // const location = useLocation();\n    // const mode = location.pathname.split('process.env.PUBLIC_URL')[1].slice(1) as StopWatchMode;\n    const mode = \"\" as StopWatchMode;\n\n    return (\n        <div className=\"flex justify-around text-black\">\n            <StopWatchModeSwitchButton mode=\"list\" text=\"Players\" icon={mdiFormatListNumberedRtl} chosenMode={mode} />\n            <StopWatchModeSwitchButton mode=\"pad\" text=\"Pad\" icon={mdiDialpad} chosenMode={mode} />\n            <StopWatchModeSwitchButton mode=\"times\" text=\"Times\" icon={mdiTimetable} chosenMode={mode} />\n        </div>\n    );\n};\n","import { add, reset } from \"@set/timer/slices/time-stamps\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { CurrentTimeKeeperContext } from \"./contexts/current-time-keeper\";\nimport { PlayersDialPad } from \"./components/players-dial-pad\";\nimport { PlayersList } from \"./components/players-list\";\nimport { PlayersTimes } from \"./components/players-times\";\nimport { Status } from \"./components/status\";\nimport { StopWatchModeSwitch } from \"./components/stopwatch-mode-switch\";\nimport { useState } from \"react\";\nimport { useTimerDispatch, useTimerSelector } from \"./hooks\";\nfunction App() {\n    const allPlayers = useTimerSelector((x) => x.players);\n    const allTimeStamps = useTimerSelector((x) => x.timeStamps);\n    const [selectedTimeKeeper, setSelectedTimeKeeper] = useState<number>();\n    const allTimeKeepers = useTimerSelector((x) => x.timeKeepers);\n\n    const dispatch = useTimerDispatch();\n\n    const playersWithTimeStamps = (timeKeeperId: number) =>\n        allPlayers.map((x) => ({\n            ...x,\n            timeStamp: allTimeStamps.find((a) => a.playerId === x.id && a.timeKeeperId === timeKeeperId)\n        }));\n\n    const timeStampsWithPlayers = (timeKeeperId: number) =>\n        allTimeStamps\n            .filter((s) => s.timeKeeperId === timeKeeperId)\n            .map((s) => ({\n                ...s,\n                player: allPlayers.find((p) => s.playerId === p.id)\n            }));\n\n    return (\n        <CurrentTimeKeeperContext.Provider\n            value={{ timeKeeperId: selectedTimeKeeper, setTimeKeeperId: setSelectedTimeKeeper }}\n        >\n            <Router>\n                <div id=\"app-holder\" className=\"flex flex-col overflow-hidden bg-gray-800 h-full w-screen text-white\">\n                    <Status timeKeeperName={allTimeKeepers.find((tk) => tk.id === selectedTimeKeeper)?.name} />\n                    <div id=\"module-holder\" className=\"relative overflow-hidden flex-col flex-1\">\n                        <div className=\"h-full flex-1 overflow-y-scroll\">\n                            <CurrentTimeKeeperContext.Consumer>\n                                {({ timeKeeperId }) => (\n                                    <Switch>\n                                        {timeKeeperId !== undefined && (\n                                            <>\n                                                <Route exact path={`${process.env.PUBLIC_URL}/list`}>\n                                                    <PlayersList\n                                                        onTimeRecord={(playerId) =>\n                                                            dispatch(\n                                                                add({\n                                                                    playerId,\n                                                                    timeKeeperId,\n                                                                    time: new Date().getTime()\n                                                                })\n                                                            )\n                                                        }\n                                                        onTimeReset={(timeStampId) =>\n                                                            dispatch(reset({ id: timeStampId }))\n                                                        }\n                                                        players={playersWithTimeStamps(timeKeeperId)}\n                                                    />\n                                                </Route>\n                                                <Route exact path={`${process.env.PUBLIC_URL}/pad`}>\n                                                    <PlayersDialPad\n                                                        onPlayerCheckIn={(playerId) => {\n                                                            dispatch(\n                                                                add({\n                                                                    playerId,\n                                                                    timeKeeperId,\n                                                                    time: new Date().getTime()\n                                                                })\n                                                            );\n                                                        }}\n                                                        title={\"Clock in player\"}\n                                                        timeKeeperId={selectedTimeKeeper}\n                                                    />\n                                                </Route>\n                                                <Route exact path={`${process.env.PUBLIC_URL}/times`}>\n                                                    <PlayersTimes\n                                                        onAddTime={() => {\n                                                            dispatch(add({ timeKeeperId, time: new Date().getTime() }));\n                                                        }}\n                                                        times={timeStampsWithPlayers(timeKeeperId)}\n                                                    />\n                                                </Route>\n                                            </>\n                                        )}\n                                    </Switch>\n                                )}\n                            </CurrentTimeKeeperContext.Consumer>\n                        </div>\n                    </div>\n                    <div>\n                        <StopWatchModeSwitch />\n                    </div>\n                </div>\n            </Router>\n        </CurrentTimeKeeperContext.Provider>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import * as m from \"../model\";\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nexport type PlayersState = m.Player[];\n\nconst initialState: PlayersState = [];\n\nexport const playersSlice = createSlice({\n    name: \"players\",\n    initialState,\n    reducers: {\n        register: (state, action: PayloadAction<Omit<m.Player, \"id\">>) => {\n            return m.register(state, action.payload);\n        },\n        changeInfo: (state, action: PayloadAction<m.Player>) => {\n            return m.changeInfo(state, action.payload);\n        }\n    }\n});\n\nexport const { register, changeInfo } = playersSlice.actions;\n\nexport default playersSlice.reducer;\n","import * as m from \"../model\";\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nexport type RaceCategoriesState = m.RaceCategory[];\n\nconst initialState: RaceCategoriesState = [];\n\nexport const raceCategoriesSlice = createSlice({\n    name: \"raceCategories\",\n    initialState,\n    reducers: {\n        add: (state, action: PayloadAction<Omit<m.RaceCategory, \"id\">>) => {\n            return m.addRaceCategory(state, action.payload);\n        },\n        remove: (state, action: PayloadAction<Pick<m.RaceCategory, \"id\">>) => {\n            return m.removeRaceCategory(state, action.payload.id);\n        }\n    }\n});\n\nexport const { add, remove } = raceCategoriesSlice.actions;\n\nexport default raceCategoriesSlice.reducer;\n","import * as m from \"../model\";\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nexport type TimeKeepersState = m.TimeKeeper[];\n\nconst initialState: TimeKeepersState = [];\n\nexport const timeKeepersSlice = createSlice({\n    name: \"timeKeepers\",\n    initialState,\n    reducers: {\n        add: (state, action: PayloadAction<Omit<m.TimeKeeper, \"id\">>) => {\n            return m.addTimeKeeper(state, action.payload);\n        },\n        remove: (state, action: PayloadAction<Pick<m.TimeKeeper, \"id\">>) => {\n            return m.removeTimeKeeper(state, action.payload.id);\n        }\n    }\n});\n\nexport const { add, remove } = timeKeepersSlice.actions;\n\nexport default timeKeepersSlice.reducer;\n","import players from \"./slices/players\";\nimport raceCategories from \"./slices/race-categories\";\nimport timeKeepers from \"./slices/time-keepers\";\nimport timeStamps from \"./slices/time-stamps\";\nimport {\n    AnyAction,\n    combineReducers,\n    configureStore,\n    Middleware\n    } from \"@reduxjs/toolkit\";\n\nconst reducer = combineReducers({ players, timeKeepers, timeStamps, raceCategories });\n\nconst resettableRootReducer = (state: TimerState, action: AnyAction) => {\n    if (action.type === \"REPLACE_STATE\") {\n        return action.state as TimerState;\n    }\n    return reducer(state, action) as TimerState;\n};\n\nexport const createStore = (middlewares: Middleware<{}, TimerState, TimerDispatch>[]) =>\n    configureStore({\n        reducer: resettableRootReducer as any,\n        middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(middlewares)\n    });\n\n//store created only for typechecking\nconst store = configureStore({\n    reducer\n});\n\n// Infer the `TimerState` and `TimerDispatch` types from the store itself\nexport type TimerState = ReturnType<typeof store.getState>;\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type TimerDispatch = typeof store.dispatch;\n","import App from \"./App\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { createStore, TimerDispatch, TimerState } from \"@set/timer/store\";\nimport { Middleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport { socket } from \"./connection\";\nimport \"./index.scss\";\n\nsocket.on(\"receive-action\", (action) => store.dispatch({ ...action, __remote: true }));\nsocket.on(\"receive-state\", (state) => store.dispatch({ type: \"REPLACE_STATE\", state, __remote: true }));\nexport const postActionsMiddleware: Middleware<{}, TimerState, TimerDispatch> = (storeApi) => (next) => (action) => {\n    if (!action.__remote && socket.connected) socket.emit(\"post-action\", action);\n\n    next(action);\n};\n\nconst store = createStore([postActionsMiddleware]);\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}