generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    valid        Boolean
}

model User {
    id                String    @id @default(cuid())
    name              String
    email             String    @unique
    password          String
    image             String?
    sessions          Session[]
    registeredPlayers Player[]
}

model Race {
    id                   Int                    @id @default(autoincrement())
    name                 String
    description          String
    location             String
    sportKind            String
    date                 DateTime
    termsUrl             String?
    websiteUrl           String?
    emailTemplate        String?
    playersLimit         Int?
    registrationEnabled  Boolean
    registrationCutoff   DateTime?
    classifications      Classification[]
    timeKeeper           TimingPoint[]
    player               Player[]
    splitTime            SplitTime[]
    manualSplitTime      ManualSplitTime[]
    stopwatch            Stopwatch?
    playerRegistration   PlayerRegistration[]
    apiKey               ApiKey[]
    timingPointAccessUrl TimingPointAccessUrl[]
    bibNumber            BibNumber[]
    absence              Absence[]
    playerProfile        PlayerProfile[]
    TimePenalty          TimePenalty[]
    Disqualification     Disqualification[]
    SplitOrder           SplitOrder[]
    Split                Split[]
}

model ApiKey {
    id   Int    @id @default(autoincrement())
    key  String
    name String

    race   Race @relation(fields: [raceId], references: [id])
    raceId Int
}

model Stopwatch {
    race   Race   @relation(fields: [raceId], references: [id])
    raceId Int
    state  String

    @@id([raceId])
}

model Classification {
    id          Int          @id @default(autoincrement())
    name        String
    race        Race         @relation(fields: [raceId], references: [id])
    raceId      Int
    players     Player[]
    categories  Category[]
    splitOrders SplitOrder[]
    splits      Split[]

    @@unique([raceId, name])
}

model Category {
    id               Int            @id @default(autoincrement())
    name             String
    abbrev           String
    minAge           Int?
    maxAge           Int?
    gender           String?
    isSpecial        Boolean
    classification   Classification @relation(fields: [classificationId], references: [id], onDelete: Cascade)
    classificationId Int
}

model Player {
    id                   Int                @id @default(autoincrement())
    bibNumber            String
    startTime            Int?
    profile              PlayerProfile      @relation(fields: [playerProfileId], references: [id])
    race                 Race               @relation(fields: [raceId], references: [id])
    raceId               Int
    classification       Classification     @relation(fields: [classificationId], references: [id])
    classificationId     Int
    promotedBy           User               @relation(fields: [promotedByUserId], references: [id])
    promotedByUserId     String
    splitTime            SplitTime[]
    manualSplitTime      ManualSplitTime[]
    fromRegistration     PlayerRegistration @relation(fields: [playerRegistrationId], references: [id])
    playerRegistrationId Int
    absence              Absence[]
    playerProfileId      Int
    TimePenalty          TimePenalty[]
    Disqualification     Disqualification?

    @@unique([raceId, playerRegistrationId])
    @@unique([raceId, bibNumber])
    @@unique([raceId, startTime])
}

model TimingPoint {
    id                   Int                    @id @default(autoincrement())
    name                 String
    abbrev               String
    type                 String
    description          String?
    race                 Race                   @relation(fields: [raceId], references: [id])
    raceId               Int
    timingPointAccessUrl TimingPointAccessUrl[]
    split                Split[]

    @@unique([raceId, name])
    @@unique([raceId, abbrev])
}

model Split {
    id                Int            @id @default(autoincrement())
    name              String
    classification    Classification @relation(fields: [classificationId], references: [id])
    classificationId  Int
    race              Race           @relation(fields: [raceId], references: [id])
    raceId            Int
    timingPoint       TimingPoint    @relation(fields: [timingPointId], references: [id])
    timingPointId     Int
    distanceFromStart Int?

    splitTime       SplitTime[]
    manualSplitTime ManualSplitTime[]
    Absence         Absence[]
}

model SplitOrder {
    order            String
    race             Race           @relation(fields: [raceId], references: [id])
    raceId           Int
    classification   Classification @relation(fields: [classificationId], references: [id])
    classificationId Int

    @@id([classificationId])
}

model BibNumber {
    id     Int    @id @default(autoincrement())
    number String
    race   Race   @relation(fields: [raceId], references: [id])
    raceId Int

    @@unique([raceId, number])
}

model TimingPointAccessUrl {
    id              Int      @id @default(autoincrement())
    name            String
    code            String?
    canAccessOthers Boolean
    token           String
    expireDate      DateTime

    timingPoint   TimingPoint @relation(fields: [timingPointId], references: [id])
    timingPointId Int
    race          Race        @relation(fields: [raceId], references: [id])
    raceId        Int
}

model SplitTime {
    id        Int
    bibNumber String
    player    Player @relation(fields: [raceId, bibNumber], references: [raceId, bibNumber])
    time      BigInt
    race      Race   @relation(fields: [raceId], references: [id])
    raceId    Int
    split     Split  @relation(fields: [splitId], references: [id])
    splitId   Int

    @@id([id, raceId])
    @@unique([splitId, bibNumber])
}

model Absence {
    id        Int
    bibNumber String
    player    Player @relation(fields: [raceId, bibNumber], references: [raceId, bibNumber])
    race      Race   @relation(fields: [raceId], references: [id])
    raceId    Int
    split     Split  @relation(fields: [splitId], references: [id])
    splitId   Int

    @@id([id, raceId])
    @@unique([splitId, bibNumber])
}

model ManualSplitTime {
    id        Int    @id @default(autoincrement())
    bibNumber String
    player    Player @relation(fields: [raceId, bibNumber], references: [raceId, bibNumber])
    time      BigInt
    race      Race   @relation(fields: [raceId], references: [id])
    raceId    Int
    split     Split? @relation(fields: [splitId], references: [id])
    splitId   Int?

    @@unique([splitId, bibNumber])
}

model TimePenalty {
    id        Int    @id @default(autoincrement())
    bibNumber String
    player    Player @relation(fields: [raceId, bibNumber], references: [raceId, bibNumber])
    time      Int
    reason    String
    race      Race   @relation(fields: [raceId], references: [id])
    raceId    Int
}

model Disqualification {
    id        Int    @id @default(autoincrement())
    bibNumber String
    player    Player @relation(fields: [raceId, bibNumber], references: [raceId, bibNumber])
    reason    String
    race      Race   @relation(fields: [raceId], references: [id])
    raceId    Int

    @@unique([raceId, bibNumber])
}

model PlayerRegistration {
    id               Int           @id @default(autoincrement())
    registrationDate DateTime
    hasPaid          Boolean
    paymentDate      DateTime?
    profile          PlayerProfile @relation(fields: [playerProfileId], references: [id])
    race             Race          @relation(fields: [raceId], references: [id])
    raceId           Int
    player           Player[]
    playerProfileId  Int
}

model PlayerProfile {
    id                 Int                  @id @default(autoincrement())
    name               String
    lastName           String
    birthDate          DateTime
    gender             String
    team               String?
    city               String?
    country            String?
    email              String?
    phoneNumber        String?
    icePhoneNumber     String?
    playerRegistration PlayerRegistration[]
    player             Player[]
    race               Race                 @relation(fields: [raceId], references: [id])
    raceId             Int
}
