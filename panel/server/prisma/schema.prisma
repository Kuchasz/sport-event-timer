generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                String    @id @default(cuid())
    name              String?
    email             String?   @unique
    emailVerified     DateTime?
    image             String?
    accounts          Account[]
    sessions          Session[]
    registeredPlayers Player[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Domain models

model Race {
    id                   Int                    @id @default(autoincrement())
    name                 String
    date                 DateTime
    termsUrl             String?
    emailTemplate        String?
    playersLimit         Int?
    registrationEnabled  Boolean
    classifications      Classification[]
    timeKeeper           TimingPoint[]
    player               Player[]
    splitTime            SplitTime[]
    manualSplitTime      ManualSplitTime[]
    stopwatch            Stopwatch?
    playerRegistration   PlayerRegistration[]
    apiKey               ApiKey[]
    timingPointOrder     TimingPointOrder[]
    timingPointAccessUrl TimingPointAccessUrl[]
    bibNumber            BibNumber[]
    absence              Absence[]
}

model ApiKey {
    id   Int    @id @default(autoincrement())
    key  String
    name String

    race   Race @relation(fields: [raceId], references: [id])
    raceId Int
}

model Stopwatch {
    race   Race   @relation(fields: [raceId], references: [id])
    raceId Int
    state  String

    @@id([raceId])
}

model Classification {
    id         Int        @id @default(autoincrement())
    name       String
    race       Race       @relation(fields: [raceId], references: [id])
    raceId     Int
    players    Player[]
    categories Category[]

    @@unique([raceId, name])
}

model Category {
    id               Int            @id @default(autoincrement())
    name             String
    minAge           Int?
    maxAge           Int?
    gender           String?
    isSpecial        Boolean
    classification   Classification @relation(fields: [classificationId], references: [id])
    classificationId Int
}

model Player {
    id                   Int                 @id @default(autoincrement())
    name                 String
    lastName             String
    birthDate            DateTime
    gender               String
    bibNumber            String?
    startTime            Int?
    team                 String?
    city                 String?
    country              String?
    email                String?
    phoneNumber          String?
    icePhoneNumber       String?
    race                 Race                @relation(fields: [raceId], references: [id])
    raceId               Int
    classification       Classification      @relation(fields: [classificationId], references: [id])
    classificationId     Int
    registeredBy         User                @relation(fields: [registeredByUserId], references: [id])
    registeredByUserId   String
    splitTime            SplitTime[]
    manualSplitTime      ManualSplitTime[]
    fromRegistration     PlayerRegistration? @relation(fields: [playerRegistrationId], references: [id])
    playerRegistrationId Int?
    absence              Absence[]

    @@unique([raceId, bibNumber])
    @@unique([classificationId, startTime])
}

model TimingPoint {
    id                   Int                    @id @default(autoincrement())
    name                 String
    description          String?
    race                 Race                   @relation(fields: [raceId], references: [id])
    raceId               Int
    splitTime            SplitTime[]
    manualSplitTime      ManualSplitTime[]
    timingPointAccessUrl TimingPointAccessUrl[]
    absence              Absence[]

    @@unique([raceId, name])
}

model TimingPointOrder {
    order  String
    race   Race   @relation(fields: [raceId], references: [id])
    raceId Int

    @@id([raceId])
}

model BibNumber {
    id     Int    @id @default(autoincrement())
    number String
    race   Race   @relation(fields: [raceId], references: [id])
    raceId Int

    @@unique([raceId, number])
}

model TimingPointAccessUrl {
    id              Int      @id @default(autoincrement())
    name            String
    code            String?
    canAccessOthers Boolean
    token           String
    expireDate      DateTime

    timingPoint   TimingPoint @relation(fields: [timingPointId], references: [id])
    timingPointId Int
    race          Race        @relation(fields: [raceId], references: [id])
    raceId        Int
}

model SplitTime {
    id            Int
    bibNumber     String
    time          BigInt?
    race          Race        @relation(fields: [raceId], references: [id])
    raceId        Int
    timingPoint   TimingPoint @relation(fields: [timingPointId], references: [id])
    timingPointId Int
    player        Player      @relation(fields: [raceId, bibNumber], references: [raceId, bibNumber])

    @@id([id, raceId])
    @@unique([timingPointId, bibNumber])
}

model Absence {
    id            Int
    bibNumber     String
    race          Race        @relation(fields: [raceId], references: [id])
    raceId        Int
    timingPoint   TimingPoint @relation(fields: [timingPointId], references: [id])
    timingPointId Int
    player        Player      @relation(fields: [raceId, bibNumber], references: [raceId, bibNumber])

    @@id([id, raceId])
    @@unique([timingPointId, bibNumber])
}

model ManualSplitTime {
    id            Int         @id @default(autoincrement())
    bibNumber     String
    time          BigInt?
    race          Race        @relation(fields: [raceId], references: [id])
    raceId        Int
    timingPoint   TimingPoint @relation(fields: [timingPointId], references: [id])
    timingPointId Int
    player        Player      @relation(fields: [raceId, bibNumber], references: [raceId, bibNumber])

    @@unique([timingPointId, bibNumber])
}

model PlayerRegistration {
    id               Int       @id @default(autoincrement())
    registrationDate DateTime
    name             String
    lastName         String
    birthDate        DateTime
    gender           String
    team             String?
    city             String?
    country          String?
    email            String?
    phoneNumber      String?
    icePhoneNumber   String?
    hasPaid          Boolean
    paymentDate      DateTime?
    race             Race      @relation(fields: [raceId], references: [id])
    raceId           Int
    player           Player[]
}
